@inherits LayoutComponentBase
@inject AuthService AuthService
@inject IJSRuntime JSRuntime
@implements IDisposable

<MudThemeProvider Theme="@_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    @if (_isAuthenticated)
    {
        <!-- Sidebar Navigation -->
        <MudDrawer @bind-Open="_drawerOpen" 
                   ClipMode="DrawerClipMode.Always" 
                   Elevation="2"
                   Variant="@DrawerVariant.Mini" 
                   OpenMiniOnHover="true">
            <NavMenu />
        </MudDrawer>

        <!-- Top App Bar -->
        <MudAppBar Elevation="1" Dense="true">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" 
                         Color="Color.Inherit" 
                         Edge="Edge.Start" 
                         OnClick="@ToggleDrawer" />
            
            <MudText Typo="Typo.h6" Class="ml-3">Sphere Control Admin</MudText>
            
            <MudSpacer />
            
            <!-- User Menu -->
            <MudMenu Icon="@Icons.Material.Filled.AccountCircle" 
                     Color="Color.Inherit" 
                     Direction="Origin.BottomLeft"
                     OffsetX="true">
                <MudMenuItem>
                    <div class="d-flex flex-column">
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">
                            @(_userInfo?.Email ?? "Admin")
                        </MudText>
                        <MudText Typo="Typo.caption" Class="mud-text-secondary">
                            @(_userInfo?.FirstName) @(_userInfo?.LastName)
                        </MudText>
                    </div>
                </MudMenuItem>
                <MudDivider />
                <MudMenuItem Icon="@Icons.Material.Filled.Person" OnClick="GoToProfile">
                    Mi perfil
                </MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.Settings" OnClick="GoToSettings">
                    Configuración
                </MudMenuItem>
                <MudDivider />
                <MudMenuItem Icon="@Icons.Material.Filled.Logout" 
                           OnClick="HandleLogout"
                           Class="mud-error-text">
                    Cerrar sesión
                </MudMenuItem>
            </MudMenu>
        </MudAppBar>

        <!-- Main Content -->
        <MudMainContent Class="pt-16 px-4">
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-4">
                @Body
            </MudContainer>
        </MudMainContent>
    }
    else
    {
        <!-- Login Layout -->
        <MudMainContent>
            @Body
        </MudMainContent>
    }
</MudLayout>

@code {
    private bool _drawerOpen = false;
    private bool _isAuthenticated = false;
    private UserInfo? _userInfo;

    private readonly MudTheme _theme = new()
    {
        Palette = new PaletteLight()
        {
            Primary = "#1976d2",
            Secondary = "#424242",
            AppbarBackground = "#1976d2",
            Background = "#f5f5f5",
            DrawerBackground = "#ffffff",
            DrawerText = "rgba(0,0,0, 0.87)",
            Success = "#4caf50"
        },
        PaletteDark = new PaletteDark()
        {
            Primary = "#90caf9",
            Secondary = "#ce93d8",
            AppbarBackground = "#1976d2",
            Background = "#121212",
            DrawerBackground = "#1e1e1e",
            DrawerText = "rgba(255,255,255, 0.87)"
        }
    };

    protected override async Task OnInitializedAsync()
    {
        // Verificar autenticación
        _isAuthenticated = await AuthService.IsAuthenticatedAsync();
        
        if (_isAuthenticated)
        {
            _userInfo = await AuthService.GetUserInfoAsync();
        }

        // Suscribirse a cambios de estado de autenticación
        AuthService.AuthStateChanged += OnAuthStateChanged;
    }

    private void OnAuthStateChanged(bool isAuthenticated)
    {
        _isAuthenticated = isAuthenticated;
        
        if (isAuthenticated)
        {
            InvokeAsync(async () =>
            {
                _userInfo = await AuthService.GetUserInfoAsync();
                StateHasChanged();
            });
        }
        else
        {
            _userInfo = null;
            StateHasChanged();
        }
    }

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void GoToProfile()
    {
        // TODO: Implementar página de perfil
    }

    private void GoToSettings()
    {
        // TODO: Implementar página de configuración
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
    }

    public void Dispose()
    {
        AuthService.AuthStateChanged -= OnAuthStateChanged;
    }
}