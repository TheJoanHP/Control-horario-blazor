@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inject AuthService AuthService
@inject NavigationManager Navigation

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <!-- Sidebar -->
    <MudDrawer @bind-Open="_drawerOpen" 
               Elevation="2" 
               Variant="@DrawerVariant.Mini" 
               OpenMiniOnHover="true"
               ClipMode="DrawerClipMode.Always">
        <NavMenu />
    </MudDrawer>

    <!-- Top Bar -->
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" 
                       Color="Color.Inherit" 
                       Edge="Edge.Start" 
                       OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <TopBar />
    </MudAppBar>

    <!-- Main Content -->
    <MudMainContent>
        <div class="ma-4">
            @if (_isCheckingAuth)
            {
                <!-- Loading mientras verifica autenticación -->
                <MudContainer MaxWidth="MaxWidth.False" Class="d-flex justify-center align-center" Style="min-height: 70vh;">
                    <div class="text-center">
                        <MudProgressCircular Size="Size.Large" Indeterminate="true" />
                        <MudText Typo="Typo.h6" Class="mt-4">Verificando autenticación...</MudText>
                    </div>
                </MudContainer>
            }
            else if (!_isAuthenticated)
            {
                <!-- Redirigir al login -->
                <MudContainer MaxWidth="MaxWidth.False" Class="d-flex justify-center align-center" Style="min-height: 70vh;">
                    <div class="text-center">
                        <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Large" Class="mud-text-secondary mb-4" />
                        <MudText Typo="Typo.h6" Class="mb-4">Sesión no válida</MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary mb-4">
                            Redirigiendo al inicio de sesión...
                        </MudText>
                        <MudProgressLinear Indeterminate="true" />
                    </div>
                </MudContainer>
            }
            else
            {
                <!-- Contenido principal -->
                <CascadingValue Value="this">
                    @Body
                </CascadingValue>
            }
        </div>
    </MudMainContent>
</MudLayout>

<!-- Error UI -->
<div id="blazor-error-ui">
    <div class="d-flex align-center">
        <MudIcon Icon="@Icons.Material.Filled.Error" Class="mr-2" />
        <span>Ha ocurrido un error. La aplicación puede no responder hasta que se recargue.</span>
        <MudButton Variant="Variant.Text" 
                   Color="Color.Primary" 
                   Size="Size.Small"
                   Class="ml-2"
                   OnClick="ReloadPage">
            Recargar
        </MudButton>
        <MudIconButton Icon="@Icons.Material.Filled.Close" 
                       Size="Size.Small"
                       Class="ml-2 dismiss" />
    </div>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isAuthenticated = false;
    private bool _isCheckingAuth = true;

    protected override async Task OnInitializedAsync()
    {
        // Verificar autenticación al cargar
        await CheckAuthentication();
        
        // Suscribirse a cambios de estado de autenticación
        AuthService.AuthStateChanged += OnAuthStateChanged;
    }

    private async Task CheckAuthentication()
    {
        try
        {
            _isAuthenticated = await AuthService.IsAuthenticatedAsync();
            
            if (!_isAuthenticated)
            {
                // Redirigir al login si no está autenticado
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception)
        {
            _isAuthenticated = false;
            Navigation.NavigateTo("/login");
        }
        finally
        {
            _isCheckingAuth = false;
            StateHasChanged();
        }
    }

    private void OnAuthStateChanged(bool isAuthenticated)
    {
        _isAuthenticated = isAuthenticated;
        
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login");
        }
        
        StateHasChanged();
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void ReloadPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    public void Dispose()
    {
        AuthService.AuthStateChanged -= OnAuthStateChanged;
    }
}