@page "/"
@using Shared.Models.DTOs.Auth
@inject ApiService ApiService
@inject NotificationService NotificationService
@inject AuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Dashboard - Sphere Admin</PageTitle>

<!-- Verificar autenticación -->
@if (!_isAuthenticated)
{
    <MudContainer MaxWidth="MaxWidth.False" Class="d-flex justify-center align-center" Style="min-height: 100vh;">
        <div class="text-center">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
            <MudText Typo="Typo.h6" Class="mt-4">Redirigiendo al login...</MudText>
        </div>
    </MudContainer>
    
    <script>
        window.location.href = '/login';
    </script>
}
else
{
    <!-- Header del Dashboard -->
    <MudContainer MaxWidth="MaxWidth.False" Class="mb-6">
        <MudGrid>
            <MudItem xs="12">
                <div class="d-flex justify-space-between align-center">
                    <div>
                        <MudText Typo="Typo.h3" Class="mud-text-primary font-weight-bold">
                            Dashboard
                        </MudText>
                        <MudText Typo="Typo.subtitle1" Class="mud-text-secondary">
                            Bienvenido, @(_userInfo?.FirstName ?? "Admin"). Panel de control principal de Sphere.
                        </MudText>
                    </div>
                    <MudButton Variant="Variant.Filled" 
                             Color="Color.Primary" 
                             StartIcon="@Icons.Material.Filled.Refresh"
                             OnClick="@LoadDashboardData"
                             Disabled="@_isLoading">
                        Actualizar
                    </MudButton>
                </div>
            </MudItem>
        </MudGrid>
    </MudContainer>

    @if (_isLoading)
    {
        <!-- Loading State -->
        <MudContainer MaxWidth="MaxWidth.False">
            <MudGrid>
                <MudItem xs="12" Class="text-center py-8">
                    <MudProgressCircular Size="Size.Large" Indeterminate="true" />
                    <MudText Typo="Typo.h6" Class="mt-4">Cargando datos del dashboard...</MudText>
                </MudItem>
            </MudGrid>
        </MudContainer>
    }
    else
    {
        <!-- Statistics Cards -->
        <MudContainer MaxWidth="MaxWidth.False" Class="mb-6">
            <MudGrid>
                <!-- Total Tenants -->
                <MudItem xs="12" sm="6" md="3">
                    <MudCard Elevation="4" Class="pa-4">
                        <MudCardContent Class="pb-2">
                            <div class="d-flex justify-space-between align-center">
                                <div>
                                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary">
                                        Total Empresas
                                    </MudText>
                                    <MudText Typo="Typo.h4" Class="font-weight-bold mud-text-primary">
                                        @(_dashboardStats?.TotalTenants ?? 0)
                                    </MudText>
                                </div>
                                <MudAvatar Color="Color.Primary" Size="Size.Large">
                                    <MudIcon Icon="@Icons.Material.Filled.Business" Size="Size.Medium" />
                                </MudAvatar>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <!-- Active Tenants -->
                <MudItem xs="12" sm="6" md="3">
                    <MudCard Elevation="4" Class="pa-4">
                        <MudCardContent Class="pb-2">
                            <div class="d-flex justify-space-between align-center">
                                <div>
                                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary">
                                        Empresas Activas
                                    </MudText>
                                    <MudText Typo="Typo.h4" Class="font-weight-bold mud-text-success">
                                        @(_dashboardStats?.ActiveTenants ?? 0)
                                    </MudText>
                                </div>
                                <MudAvatar Color="Color.Success" Size="Size.Large">
                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Medium" />
                                </MudAvatar>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <!-- Total Users -->
                <MudItem xs="12" sm="6" md="3">
                    <MudCard Elevation="4" Class="pa-4">
                        <MudCardContent Class="pb-2">
                            <div class="d-flex justify-space-between align-center">
                                <div>
                                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary">
                                        Total Usuarios
                                    </MudText>
                                    <MudText Typo="Typo.h4" Class="font-weight-bold mud-text-info">
                                        @(_dashboardStats?.TotalUsers ?? 0)
                                    </MudText>
                                </div>
                                <MudAvatar Color="Color.Warning" Size="Size.Large">
                                    <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Medium" />
                                </MudAvatar>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <!-- Monthly Revenue -->
                <MudItem xs="12" sm="6" md="3">
                    <MudCard Elevation="4" Class="pa-4">
                        <MudCardContent Class="pb-2">
                            <div class="d-flex justify-space-between align-center">
                                <div>
                                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary">
                                        Ingresos Mensuales
                                    </MudText>
                                    <MudText Typo="Typo.h4" Class="font-weight-bold mud-text-secondary">
                                        €@(_dashboardStats?.MonthlyRevenue.ToString("F2") ?? "0.00")
                                    </MudText>
                                </div>
                                <MudAvatar Color="Color.Secondary" Size="Size.Large">
                                    <MudIcon Icon="@Icons.Material.Filled.Euro" Size="Size.Medium" />
                                </MudAvatar>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudContainer>

        <!-- Recent Tenants -->
        @if (_recentTenants?.Any() == true)
        {
            <MudContainer MaxWidth="MaxWidth.False">
                <MudCard Elevation="4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Filled.Schedule" Class="mr-2" />
                                Empresas Recientes
                            </MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudButton Variant="Variant.Text" 
                                     Color="Color.Primary" 
                                     Href="/tenants"
                                     EndIcon="@Icons.Material.Filled.ArrowForward">
                                Ver Todas
                            </MudButton>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudList T="string">
                            @foreach (var tenant in _recentTenants.Take(5))
                            {
                                <MudListItem T="string" 
                                           Text="@tenant.Name" 
                                           SecondaryText="@($"Creada: {tenant.CreatedAt:dd/MM/yyyy}")"
                                           Icon="@Icons.Material.Filled.Business"
                                           OnClick="@(() => NavigateToTenant(tenant.Id))">
                                    <NestedList>
                                        <div class="d-flex gap-2">
                                            <MudChip T="string" Size="Size.Small" 
                                                   Color="@(tenant.Active ? Color.Success : Color.Error)">
                                                @(tenant.Active ? "Activa" : "Inactiva")
                                            </MudChip>
                                            <MudChip T="string" Size="Size.Small" 
                                                   Color="@GetLicenseColor(tenant.LicenseType)">
                                                @tenant.LicenseType
                                            </MudChip>
                                        </div>
                                    </NestedList>
                                </MudListItem>
                                @if (tenant != _recentTenants.Last())
                                {
                                    <MudDivider />
                                }
                            }
                        </MudList>
                    </MudCardContent>
                </MudCard>
            </MudContainer>
        }
    }
}

@code {
    private bool _isAuthenticated = false;
    private bool _isLoading = true;
    private Shared.Models.DTOs.Auth.UserInfo? _userInfo;
    private DashboardStats? _dashboardStats;
    private List<TenantDto>? _recentTenants;

    protected override async Task OnInitializedAsync()
    {
        _isAuthenticated = await AuthService.IsAuthenticatedAsync();
        
        if (_isAuthenticated)
        {
            _userInfo = await AuthService.GetUserInfoAsync();
            await LoadDashboardData();
        }
    }

    private async Task LoadDashboardData()
    {
        try
        {
            _isLoading = true;

            // Cargar estadísticas del dashboard
            _dashboardStats = await ApiService.GetDashboardStatsAsync();
            
            // Cargar tenants recientes
            var allTenants = await ApiService.GetTenantsAsync();
            _recentTenants = allTenants?.OrderByDescending(t => t.CreatedAt).Take(5).ToList();

            if (_dashboardStats == null)
            {
                NotificationService.ShowWarning("No se pudieron cargar las estadísticas");
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error cargando datos del dashboard");
            Console.WriteLine($"Error en dashboard: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void NavigateToTenant(int tenantId)
    {
        Navigation.NavigateTo($"/tenants/{tenantId}");
    }

    private Color GetLicenseColor(string licenseType)
    {
        return licenseType?.ToLower() switch
        {
            "trial" => Color.Warning,
            "basic" => Color.Info,
            "professional" => Color.Primary,
            "enterprise" => Color.Secondary,
            _ => Color.Default
        };
    }
}