@page "/tenants/{TenantId:int}/edit"
@inject ApiService ApiService
@inject NotificationService NotificationService
@inject NavigationManager Navigation

<PageTitle>Editar @(_tenant?.Name ?? "Empresa") - Sphere Admin</PageTitle>

@if (_isLoading)
{
    <MudContainer MaxWidth="MaxWidth.False" Class="d-flex justify-center align-center" Style="min-height: 400px;">
        <div class="text-center">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
            <MudText Typo="Typo.h6" Class="mt-4">Cargando información de la empresa...</MudText>
        </div>
    </MudContainer>
}
else if (_tenant == null)
{
    <MudContainer MaxWidth="MaxWidth.False" Class="d-flex justify-center align-center" Style="min-height: 400px;">
        <MudCard Class="pa-8">
            <MudCardContent Class="text-center">
                <MudIcon Icon="@Icons.Material.Filled.Error" 
                       Color="Color.Error" 
                       Size="Size.Large" 
                       Class="mb-4" />
                <MudText Typo="Typo.h5" Class="mb-4">Empresa no encontrada</MudText>
                <MudButton Variant="Variant.Filled" 
                         Color="Color.Primary" 
                         Href="/tenants"
                         StartIcon="@Icons.Material.Filled.ArrowBack">
                    Volver a la lista
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudContainer>
}
else
{
    <!-- Header -->
    <MudContainer MaxWidth="MaxWidth.False" Class="mb-4">
        <div class="d-flex align-center">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" 
                         Color="Color.Primary" 
                         Href="@($"/tenants/{TenantId}")"
                         Class="mr-3" />
            <MudAvatar Size="Size.Large" Color="Color.Primary" Class="mr-4">
                @_tenant.Name.Substring(0, 1).ToUpper()
            </MudAvatar>
            <div>
                <MudText Typo="Typo.h4" Class="mud-text-primary font-weight-bold">
                    Editar @_tenant.Name
                </MudText>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary">
                    Modifica la información de la empresa
                </MudText>
            </div>
        </div>
    </MudContainer>

    <!-- Form -->
    <MudContainer MaxWidth="MaxWidth.Large">
        <EditForm Model="@_editModel" OnValidSubmit="@HandleUpdateTenant">
            <DataAnnotationsValidator />
            
            <MudGrid>
                <!-- Información básica -->
                <MudItem xs="12" lg="8">
                    <MudCard Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Business" Class="mr-3" />
                                    <MudText Typo="Typo.h6">Información Básica</MudText>
                                </div>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="_editModel.Name"
                                                  For="@(() => _editModel.Name)"
                                                  Label="Nombre de la Empresa"
                                                  Variant="Variant.Outlined"
                                                  Required="true" />
                                </MudItem>
                                
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="_editModel.ContactEmail"
                                                  For="@(() => _editModel.ContactEmail)"
                                                  Label="Email de Contacto"
                                                  Variant="Variant.Outlined"
                                                  InputType="InputType.Email"
                                                  Required="true" />
                                </MudItem>
                                
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="_editModel.ContactPhone"
                                                  For="@(() => _editModel.ContactPhone)"
                                                  Label="Teléfono de Contacto"
                                                  Variant="Variant.Outlined" />
                                </MudItem>
                                
                                <MudItem xs="12" md="6">
                                    <MudSelect @bind-Value="_editModel.LicenseType"
                                               For="@(() => _editModel.LicenseType)"
                                               Label="Tipo de Licencia"
                                               Variant="Variant.Outlined"
                                               T="string"
                                               Required="true">
                                        <MudSelectItem Value="@("Basic")">Básica</MudSelectItem>
                                        <MudSelectItem Value="@("Professional")">Profesional</MudSelectItem>
                                        <MudSelectItem Value="@("Enterprise")">Empresarial</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                                
                                <MudItem xs="12" md="6">
                                    <MudNumericField @bind-Value="_editModel.MaxEmployees"
                                                     For="@(() => _editModel.MaxEmployees)"
                                                     Label="Máximo de Empleados"
                                                     Variant="Variant.Outlined"
                                                     Min="0" />
                                </MudItem>
                                
                                <MudItem xs="12" md="6">
                                    <MudSwitch T="bool"
                                               @bind-Value="_editModel.Active"
                                               Label="Empresa Activa"
                                               Color="Color.Success" />
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <!-- Panel lateral -->
                <MudItem xs="12" lg="4">
                    <!-- Información del sistema -->
                    <MudCard Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-3" />
                                    <MudText Typo="Typo.h6">Información del Sistema</MudText>
                                </div>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <div class="d-flex justify-space-between align-center mb-2">
                                <MudText Typo="Typo.body2" Class="mud-text-secondary">ID:</MudText>
                                <MudText Typo="Typo.body2" Class="font-weight-bold">@_tenant.Id</MudText>
                            </div>
                            
                            <div class="d-flex justify-space-between align-center mb-2">
                                <MudText Typo="Typo.body2" Class="mud-text-secondary">Subdominio:</MudText>
                                <MudText Typo="Typo.body2" Class="font-weight-bold">@_tenant.Subdomain</MudText>
                            </div>
                            
                            <div class="d-flex justify-space-between align-center">
                                <MudText Typo="Typo.body2" Class="mud-text-secondary">Creado:</MudText>
                                <MudText Typo="Typo.body2" Class="font-weight-bold">
                                    @_tenant.CreatedAt.ToString("dd/MM/yyyy")
                                </MudText>
                            </div>
                        </MudCardContent>
                    </MudCard>

                    <!-- Acciones -->
                    <MudCard>
                        <MudCardContent>
                            <MudStack Spacing="3">
                                <MudButton ButtonType="ButtonType.Submit"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           Size="Size.Large"
                                           FullWidth="true"
                                           Disabled="@(_isSaving || !HasChanges())"
                                           StartIcon="@Icons.Material.Filled.Save">
                                    @if (_isSaving)
                                    {
                                        <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                                        <span>Guardando...</span>
                                    }
                                    else
                                    {
                                        <span>Guardar Cambios</span>
                                    }
                                </MudButton>
                                
                                <MudButton Variant="Variant.Outlined"
                                           Color="Color.Default"
                                           Size="Size.Large"
                                           FullWidth="true"
                                           OnClick="@(() => Navigation.NavigateTo($"/tenants/{TenantId}"))"
                                           Disabled="@_isSaving">
                                    Cancelar
                                </MudButton>
                                
                                <MudButton Variant="Variant.Text"
                                           Color="Color.Secondary"
                                           FullWidth="true"
                                           StartIcon="@Icons.Material.Filled.Refresh"
                                           OnClick="ResetForm"
                                           Disabled="@_isSaving">
                                    Restaurar Valores
                                </MudButton>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>

            <!-- Validation Summary -->
            <ValidationSummary />
        </EditForm>
    </MudContainer>
}

@code {
    [Parameter] public int TenantId { get; set; }

    private TenantDto? _tenant;
    private TenantDto? _originalTenant;
    private readonly EditTenantModel _editModel = new();
    private bool _isLoading = true;
    private bool _isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTenant();
    }

    private async Task LoadTenant()
    {
        try
        {
            _isLoading = true;
            
            // TODO: Implementar llamada a la API real
            await Task.Delay(500);
            
            _tenant = new TenantDto
            {
                Id = TenantId,
                Name = "Empresa Demo S.L.",
                Subdomain = "empresa-demo",
                ContactName = "Juan Pérez",
                ContactEmail = "admin@empresa-demo.com",
                EmployeeCount = 25,
                LicenseType = "Professional",
                IsActive = true,
                CreatedAt = DateTime.Now.AddMonths(-6),
                MaxEmployees = 50
            };
            
            if (_tenant != null)
            {
                // Clonar para comparar cambios
                _originalTenant = new TenantDto
                {
                    Id = _tenant.Id,
                    Name = _tenant.Name,
                    Subdomain = _tenant.Subdomain,
                    ContactName = _tenant.ContactName,
                    ContactEmail = _tenant.ContactEmail,
                    EmployeeCount = _tenant.EmployeeCount,
                    LicenseType = _tenant.LicenseType,
                    IsActive = _tenant.IsActive,
                    CreatedAt = _tenant.CreatedAt,
                    MaxEmployees = _tenant.MaxEmployees
                };
                
                // Mapear a modelo de edición
                _editModel.Name = _tenant.Name;
                _editModel.ContactEmail = _tenant.ContactEmail;
                _editModel.ContactPhone = "+34 123 456 789"; // Mock
                _editModel.LicenseType = _tenant.LicenseType;
                _editModel.MaxEmployees = _tenant.MaxEmployees;
                _editModel.Active = _tenant.IsActive;
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error cargando información de la empresa");
            Console.WriteLine($"Error loading tenant: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleUpdateTenant()
    {
        try
        {
            _isSaving = true;

            // TODO: Implementar llamada a la API real
            await Task.Delay(1500);
            
            NotificationService.ShowSuccess($"Empresa '{_editModel.Name}' actualizada correctamente");
            Navigation.NavigateTo($"/tenants/{TenantId}");
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error al actualizar la empresa");
            Console.WriteLine($"Error updating tenant: {ex.Message}");
        }
        finally
        {
            _isSaving = false;
        }
    }

    private bool HasChanges()
    {
        if (_originalTenant == null) return false;

        return _editModel.Name != _originalTenant.Name ||
               _editModel.ContactEmail != _originalTenant.ContactEmail ||
               _editModel.LicenseType != _originalTenant.LicenseType ||
               _editModel.MaxEmployees != _originalTenant.MaxEmployees ||
               _editModel.Active != _originalTenant.IsActive;
    }

    private void ResetForm()
    {
        if (_originalTenant != null)
        {
            _editModel.Name = _originalTenant.Name;
            _editModel.ContactEmail = _originalTenant.ContactEmail;
            _editModel.LicenseType = _originalTenant.LicenseType;
            _editModel.MaxEmployees = _originalTenant.MaxEmployees;
            _editModel.Active = _originalTenant.IsActive;
            
            NotificationService.ShowInfo("Formulario restaurado a los valores originales");
        }
    }

    // Usar el DTO existente
    public class TenantDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Subdomain { get; set; } = string.Empty;
        public string ContactName { get; set; } = string.Empty;
        public string ContactEmail { get; set; } = string.Empty;
        public int EmployeeCount { get; set; }
        public string LicenseType { get; set; } = string.Empty;
        public bool IsActive { get; set; }
        public DateTime CreatedAt { get; set; }
        public int MaxEmployees { get; set; }
    }

    public class EditTenantModel
    {
        [Required(ErrorMessage = "El nombre de la empresa es requerido")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "El email es requerido")]
        [EmailAddress(ErrorMessage = "Formato de email inválido")]
        public string ContactEmail { get; set; } = string.Empty;

        public string ContactPhone { get; set; } = string.Empty;

        [Required(ErrorMessage = "Debe seleccionar un tipo de licencia")]
        public string LicenseType { get; set; } = "Professional";

        [Range(0, 10000, ErrorMessage = "El número de empleados debe estar entre 0 y 10000")]
        public int MaxEmployees { get; set; } = 50;

        public bool Active { get; set; } = true;
    }
}