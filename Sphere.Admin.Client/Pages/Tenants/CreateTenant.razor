@page "/tenants/create"
@inject ApiService ApiService
@inject NotificationService NotificationService
@inject NavigationManager Navigation

<PageTitle>Nueva Empresa - Sphere Admin</PageTitle>

<!-- Header -->
<MudContainer MaxWidth="MaxWidth.False" Class="mb-6">
    <div class="d-flex align-center gap-4">
        <MudButton Variant="Variant.Text" 
                 Color="Color.Primary" 
                 StartIcon="@Icons.Material.Filled.ArrowBack"
                 Href="/tenants">
            Volver
        </MudButton>
        <div>
            <MudText Typo="Typo.h3" Class="mud-text-primary font-weight-bold">
                Nueva Empresa
            </MudText>
            <MudText Typo="Typo.subtitle1" Class="mud-text-secondary">
                Registra una nueva empresa en el sistema
            </MudText>
        </div>
    </div>
</MudContainer>

<!-- Form -->
<MudContainer MaxWidth="MaxWidth.Large">
    <MudCard Elevation="4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Información de la Nueva Empresa</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <EditForm Model="@_createModel" OnValidSubmit="@HandleCreateTenant">
                <DataAnnotationsValidator />
                
                <MudGrid>
                    <!-- Información Básica -->
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6" Class="mb-4 mud-text-primary">
                            <MudIcon Icon="@Icons.Material.Filled.Business" Class="mr-2" />
                            Información Básica
                        </MudText>
                    </MudItem>

                    <!-- Código de Empresa -->
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_createModel.Code"
                                    For="@(() => _createModel.Code)"
                                    Label="Código de Empresa"
                                    Placeholder="ej: empresa-abc"
                                    Variant="Variant.Outlined"
                                    Adornment="Adornment.Start"
                                    AdornmentIcon="@Icons.Material.Filled.Tag"
                                    HelperText="Solo letras, números, guiones y guiones bajos"
                                    OnTextChanged="ValidateCode"
                                    FullWidth="true"
                                    Disabled="@_isLoading" />
                        @if (!string.IsNullOrEmpty(_codeValidationMessage))
                        {
                            <MudText Typo="Typo.caption" 
                                   Color="@(_isCodeValid ? Color.Success : Color.Error)">
                                @_codeValidationMessage
                            </MudText>
                        }
                    </MudItem>

                    <!-- Nombre de Empresa -->
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_createModel.Name"
                                    For="@(() => _createModel.Name)"
                                    Label="Nombre de la Empresa"
                                    Placeholder="ej: Empresa ABC S.L."
                                    Variant="Variant.Outlined"
                                    Adornment="Adornment.Start"
                                    AdornmentIcon="@Icons.Material.Filled.Business"
                                    FullWidth="true"
                                    Disabled="@_isLoading" />
                    </MudItem>

                    <!-- Email de Contacto -->
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_createModel.ContactEmail"
                                    For="@(() => _createModel.ContactEmail)"
                                    Label="Email de Contacto"
                                    Placeholder="admin@empresa.com"
                                    Variant="Variant.Outlined"
                                    Adornment="Adornment.Start"
                                    AdornmentIcon="@Icons.Material.Filled.Email"
                                    FullWidth="true"
                                    Disabled="@_isLoading" />
                    </MudItem>

                    <!-- Teléfono de Contacto -->
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_createModel.ContactPhone"
                                    For="@(() => _createModel.ContactPhone)"
                                    Label="Teléfono de Contacto"
                                    Placeholder="+34 XXX XXX XXX"
                                    Variant="Variant.Outlined"
                                    Adornment="Adornment.Start"
                                    AdornmentIcon="@Icons.Material.Filled.Phone"
                                    FullWidth="true"
                                    Disabled="@_isLoading" />
                    </MudItem>

                    <!-- Configuración de Licencia -->
                    <MudItem xs="12" Class="mt-6">
                        <MudText Typo="Typo.h6" Class="mb-4 mud-text-primary">
                            <MudIcon Icon="@Icons.Material.Filled.VerifiedUser" Class="mr-2" />
                            Configuración de Licencia
                        </MudText>
                    </MudItem>

                    <!-- Tipo de Licencia -->
                    <MudItem xs="12" md="8">
                        <MudSelect @bind-Value="_createModel.LicenseType"
                                 For="@(() => _createModel.LicenseType)"
                                 Label="Tipo de Licencia"
                                 Variant="Variant.Outlined"
                                 AnchorOrigin="Origin.BottomCenter"
                                 FullWidth="true"
                                 Disabled="@_isLoading">
                            <MudSelectItem Value="@("Trial")">
                                <div class="d-flex align-center gap-2">
                                    <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" Color="Color.Warning" />
                                    <span>Trial - Prueba gratuita</span>
                                </div>
                            </MudSelectItem>
                            <MudSelectItem Value="@("Basic")">
                                <div class="d-flex align-center gap-2">
                                    <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" Color="Color.Info" />
                                    <span>Basic - Plan básico</span>
                                </div>
                            </MudSelectItem>
                            <MudSelectItem Value="@("Professional")">
                                <div class="d-flex align-center gap-2">
                                    <MudIcon Icon="@Icons.Material.Filled.StarRate" Size="Size.Small" Color="Color.Primary" />
                                    <span>Professional - Plan completo</span>
                                </div>
                            </MudSelectItem>
                            <MudSelectItem Value="@("Enterprise")">
                                <div class="d-flex align-center gap-2">
                                    <MudIcon Icon="@Icons.Material.Filled.Diamond" Size="Size.Small" Color="Color.Secondary" />
                                    <span>Enterprise - Plan empresarial</span>
                                </div>
                            </MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <!-- Máximo de Empleados -->
                    <MudItem xs="12" md="4">
                        <MudNumericField @bind-Value="_createModel.MaxEmployees"
                                       For="@(() => _createModel.MaxEmployees)"
                                       Label="Máximo de Empleados"
                                       Variant="Variant.Outlined"
                                       Min="1"
                                       Max="10000"
                                       HelperText="@GetEmployeeLimitHelperText()"
                                       FullWidth="true"
                                       Disabled="@_isLoading" />
                    </MudItem>

                    <!-- Descripción del Plan -->
                    @if (!string.IsNullOrEmpty(_createModel.LicenseType))
                    {
                        <MudItem xs="12">
                            <MudAlert Severity="Severity.Info" 
                                    Icon="@GetLicenseIcon(_createModel.LicenseType)">
                                <MudText>@GetLicenseDescription(_createModel.LicenseType)</MudText>
                            </MudAlert>
                        </MudItem>
                    }

                    <!-- Validation Summary -->
                    <MudItem xs="12" Class="mt-4">
                        <ValidationSummary />
                    </MudItem>

                    <!-- Actions -->
                    <MudItem xs="12" Class="mt-6">
                        <div class="d-flex justify-end gap-4">
                            <MudButton Variant="Variant.Text" 
                                     Href="/tenants"
                                     Disabled="@_isLoading">
                                Cancelar
                            </MudButton>
                            <MudButton ButtonType="ButtonType.Submit"
                                     Variant="Variant.Filled"
                                     Color="Color.Primary"
                                     StartIcon="@Icons.Material.Filled.Add"
                                     DisDisabled="@(_isLoading || _isCodeValid == false)"
                                     Size="Size.Large">
                                @if (_isLoading)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                    <span>Creando...</span>
                                }
                                else
                                {
                                    <span>Crear Empresa</span>
                                }
                            </MudButton>
                        </div>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private readonly CreateTenantModel _createModel = new();
    private bool _isLoading = false;
    private bool _isCodeValid = false;
    private string? _codeValidationMessage;

    private async Task HandleCreateTenant()
    {
        try
        {
            _isLoading = true;

            var request = new CreateTenantRequest(
                _createModel.Code,
                _createModel.Name,
                _createModel.ContactEmail,
                _createModel.ContactPhone,
                _createModel.LicenseType,
                _createModel.MaxEmployees
            );

            var tenant = await ApiService.CreateTenantAsync(request);
            
            if (tenant != null)
            {
                NotificationService.ShowSuccess($"Empresa '{_createModel.Name}' creada correctamente");
                Navigation.NavigateTo("/tenants");
            }
            else
            {
                NotificationService.ShowError("Error al crear la empresa");
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error al crear la empresa");
            Console.WriteLine($"Error creating tenant: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task ValidateCode()
    {
        if (string.IsNullOrWhiteSpace(_createModel.Code))
        {
            _codeValidationMessage = null;
            _isCodeValid = false;
            return;
        }

        // Validación de formato
        if (!System.Text.RegularExpressions.Regex.IsMatch(_createModel.Code, @"^[a-zA-Z0-9-_]+$"))
        {
            _codeValidationMessage = "El código solo puede contener letras, números, guiones y guiones bajos";
            _isCodeValid = false;
            return;
        }

        // TODO: Validar que el código no exista (cuando esté implementado en el backend)
        _codeValidationMessage = "Código disponible";
        _isCodeValid = true;
    }

    private string GetEmployeeLimitHelperText()
    {
        return _createModel.LicenseType switch
        {
            "Trial" => "Máximo 5 empleados para plan Trial",
            "Basic" => "Máximo 25 empleados para plan Basic",
            "Professional" => "Máximo 100 empleados para plan Professional",
            "Enterprise" => "Sin límite para plan Enterprise",
            _ => "Selecciona un tipo de licencia"
        };
    }

    private string GetLicenseIcon(string licenseType)
    {
        return licenseType switch
        {
            "Trial" => Icons.Material.Filled.Schedule,
            "Basic" => Icons.Material.Filled.Star,
            "Professional" => Icons.Material.Filled.StarRate,
            "Enterprise" => Icons.Material.Filled.Diamond,
            _ => Icons.Material.Filled.Help
        };
    }

    private Color GetLicenseColor(string licenseType)
    {
        return licenseType switch
        {
            "Trial" => Color.Warning,
            "Basic" => Color.Info,
            "Professional" => Color.Primary,
            "Enterprise" => Color.Secondary,
            _ => Color.Default
        };
    }

    private string GetLicenseDescription(string licenseType)
    {
        return licenseType switch
        {
            "Trial" => "30 días gratis para probar todas las funciones. Máximo 5 empleados.",
            "Basic" => "Plan básico con funciones esenciales. €9.99/mes, máximo 25 empleados.",
            "Professional" => "Plan completo con funciones avanzadas. €19.99/mes, máximo 100 empleados.",
            "Enterprise" => "Plan empresarial sin límites. €39.99/mes, empleados ilimitados.",
            _ => "Selecciona un tipo de licencia para ver los detalles"
        };
    }

    protected override void OnInitialized()
    {
        // Valores por defecto
        _createModel.LicenseType = "Trial";
        _createModel.MaxEmployees = 5;
    }

    public class CreateTenantModel
    {
        [Required(ErrorMessage = "El código de empresa es requerido")]
        [MinLength(3, ErrorMessage = "El código debe tener al menos 3 caracteres")]
        [MaxLength(50, ErrorMessage = "El código no puede tener más de 50 caracteres")]
        public string Code { get; set; } = string.Empty;

        [Required(ErrorMessage = "El nombre de la empresa es requerido")]
        [MinLength(2, ErrorMessage = "El nombre debe tener al menos 2 caracteres")]
        [MaxLength(100, ErrorMessage = "El nombre no puede tener más de 100 caracteres")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "El email de contacto es requerido")]
        [EmailAddress(ErrorMessage = "Formato de email inválido")]
        public string ContactEmail { get; set; } = string.Empty;

        [Phone(ErrorMessage = "Formato de teléfono inválido")]
        public string ContactPhone { get; set; } = string.Empty;

        [Required(ErrorMessage = "El tipo de licencia es requerido")]
        public string LicenseType { get; set; } = string.Empty;

        [Required(ErrorMessage = "El máximo de empleados es requerido")]
        [Range(1, 10000, ErrorMessage = "El número de empleados debe estar entre 1 y 10000")]
        public int MaxEmployees { get; set; } = 5;
    }
}