@page "/tenants"
@inject ApiService ApiService
@inject NotificationService NotificationService
@inject NavigationManager Navigation
@inject IDialogService DialogService

<PageTitle>Empresas - Sphere Admin</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="py-4">
    
    <!-- Header -->
    <div class="d-flex justify-space-between align-center mb-6">
        <div>
            <MudText Typo="Typo.h4" Class="mud-text-primary font-weight-bold">
                Gestión de Empresas
            </MudText>
            <MudText Typo="Typo.body1" Class="mud-text-secondary">
                Administre todas las empresas registradas en el sistema
            </MudText>
        </div>
        
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="@(() => Navigation.NavigateTo("/tenants/create"))">
            Nueva Empresa
        </MudButton>
    </div>

    <!-- Filtros y búsqueda -->
    <MudCard Class="mb-4">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudTextField @bind-Value="_searchTerm"
                                  Label="Buscar empresa"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  OnKeyUp="OnSearchChanged"
                                  Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudSelect @bind-Value="_statusFilter"
                               Label="Estado"
                               Variant="Variant.Outlined"
                               T="string">
                        <MudSelectItem Value="@("todos")">Todos los estados</MudSelectItem>
                        <MudSelectItem Value="@("active")">Activos</MudSelectItem>
                        <MudSelectItem Value="@("inactive")">Inactivos</MudSelectItem>
                        <MudSelectItem Value="@("suspended")">Suspendidos</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudSelect @bind-Value="_licenseFilter"
                               Label="Tipo de Licencia"
                               Variant="Variant.Outlined"
                               T="string">
                        <MudSelectItem Value="@("todos")">Todas las licencias</MudSelectItem>
                        <MudSelectItem Value="@("basic")">Básica</MudSelectItem>
                        <MudSelectItem Value="@("professional")">Profesional</MudSelectItem>
                        <MudSelectItem Value="@("enterprise")">Empresarial</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="2">
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Secondary"
                               FullWidth="true"
                               OnClick="ClearFilters">
                        Limpiar Filtros
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <!-- Tabla de empresas -->
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <div class="d-flex justify-space-between align-center">
                    <MudText Typo="Typo.h6">
                        Lista de Empresas (@(_filteredTenants?.Count ?? 0))
                    </MudText>
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Refresh"
                               OnClick="LoadTenants">
                        Actualizar
                    </MudButton>
                </div>
            </CardHeaderContent>
        </MudCardHeader>
        
        <MudCardContent Class="pa-0">
            @if (_isLoading)
            {
                <div class="d-flex justify-center align-center pa-8">
                    <MudProgressCircular Size="Size.Large" Indeterminate="true" />
                </div>
            }
            else if (_filteredTenants?.Any() == true)
            {
                <MudTable Items="@_filteredTenants"
                          Hover="true"
                          FixedHeader="true"
                          Height="600px"
                          Dense="true">
                    <HeaderContent>
                        <MudTh>Empresa</MudTh>
                        <MudTh>Contacto</MudTh>
                        <MudTh>Empleados</MudTh>
                        <MudTh>Licencia</MudTh>
                        <MudTh>Estado</MudTh>
                        <MudTh>Fecha Registro</MudTh>
                        <MudTh Style="text-align: center;">Acciones</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Empresa">
                            <div class="d-flex align-center">
                                <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-3">
                                    @context.Name.Substring(0, 1).ToUpper()
                                </MudAvatar>
                                <div>
                                    <MudText Typo="Typo.body2" Class="font-weight-bold">
                                        @context.Name
                                    </MudText>
                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                        @($"{context.Subdomain}.sphere-control.com")
                                    </MudText>
                                </div>
                            </div>
                        </MudTd>
                        <MudTd DataLabel="Contacto">
                            <div>
                                <MudText Typo="Typo.body2">@context.ContactName</MudText>
                                <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                    @context.ContactEmail
                                </MudText>
                            </div>
                        </MudTd>
                        <MudTd DataLabel="Empleados">
                            <MudChip T="string" Size="Size.Small" Color="Color.Info">
                                @context.EmployeeCount empleados
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Licencia">
                            <MudChip T="string" Size="Size.Small" 
                                     Color="@GetLicenseColor(context.LicenseType)">
                                @GetLicenseText(context.LicenseType)
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Estado">
                            <MudChip T="string" Size="Size.Small" 
                                     Color="@GetStatusColor(context.IsActive)">
                                @(context.IsActive ? "Activo" : "Inactivo")
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Fecha Registro">
                            <MudText Typo="Typo.body2">
                                @context.CreatedAt.ToString("dd/MM/yyyy")
                            </MudText>
                        </MudTd>
                        <MudTd DataLabel="Acciones" Style="text-align: center;">
                            <MudButtonGroup Variant="Variant.Text" Size="Size.Small">
                                <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                               Color="Color.Primary"
                                               Title="Ver detalles"
                                               OnClick="@(() => ViewTenant(context.Id))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Color="Color.Info"
                                               Title="Editar"
                                               OnClick="@(() => EditTenant(context.Id))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Settings"
                                               Color="Color.Secondary"
                                               Title="Configurar"
                                               OnClick="@(() => ConfigureTenant(context.Id))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               Title="Eliminar"
                                               OnClick="@(() => DeleteTenant(context))" />
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
            else
            {
                <div class="d-flex flex-column justify-center align-center pa-8">
                    <MudIcon Icon="@Icons.Material.Filled.BusinessCenter" 
                             Size="Size.Large" 
                             Class="mud-text-secondary mb-4" />
                    <MudText Typo="Typo.h6" Class="mud-text-secondary mb-2">
                        No se encontraron empresas
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary mb-4">
                        No hay empresas que coincidan con los filtros aplicados
                    </MudText>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="@(() => Navigation.NavigateTo("/tenants/create"))">
                        Crear Primera Empresa
                    </MudButton>
                </div>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private List<TenantDto>? _tenants;
    private List<TenantDto>? _filteredTenants;
    private bool _isLoading = true;
    
    private string _searchTerm = string.Empty;
    private string _statusFilter = "todos";
    private string _licenseFilter = "todos";

    protected override async Task OnInitializedAsync()
    {
        await LoadTenants();
    }

    private async Task LoadTenants()
    {
        _isLoading = true;
        try
        {
            // TODO: Implementar llamada a la API
            _tenants = await GetMockTenants(); // Usar mock por ahora
            ApplyFilters();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error al cargar empresas: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void OnSearchChanged()
    {
        ApplyFilters();
    }

    protected override void OnParametersSet()
    {
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (_tenants == null) return;

        _filteredTenants = _tenants.Where(t =>
        {
            // Filtro de búsqueda
            if (!string.IsNullOrEmpty(_searchTerm))
            {
                var searchLower = _searchTerm.ToLower();
                if (!t.Name.ToLower().Contains(searchLower) &&
                    !t.ContactName.ToLower().Contains(searchLower) &&
                    !t.ContactEmail.ToLower().Contains(searchLower))
                {
                    return false;
                }
            }

            // Filtro de estado
            if (_statusFilter != "todos")
            {
                if (_statusFilter == "active" && !t.IsActive) return false;
                if (_statusFilter == "inactive" && t.IsActive) return false;
            }

            // Filtro de licencia
            if (_licenseFilter != "todos")
            {
                if (t.LicenseType.ToLower() != _licenseFilter) return false;
            }

            return true;
        }).ToList();

        StateHasChanged();
    }

    private void ClearFilters()
    {
        _searchTerm = string.Empty;
        _statusFilter = "todos";
        _licenseFilter = "todos";
        ApplyFilters();
    }

    private void ViewTenant(int tenantId)
    {
        Navigation.NavigateTo($"/tenants/{tenantId}");
    }

    private void EditTenant(int tenantId)
    {
        Navigation.NavigateTo($"/tenants/{tenantId}/edit");
    }

    private void ConfigureTenant(int tenantId)
    {
        Navigation.NavigateTo($"/tenants/{tenantId}/settings");
    }

    private async Task DeleteTenant(TenantDto tenant)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            ["ContentText"] = $"¿Está seguro que desea eliminar la empresa '{tenant.Name}'? Esta acción no se puede deshacer.",
            ["ButtonText"] = "Eliminar",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<Sphere.Admin.Client.Components.Common.ConfirmDialog>("Confirmar Eliminación", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            try
            {
                // TODO: Implementar eliminación en API
                NotificationService.ShowSuccess($"Empresa '{tenant.Name}' eliminada correctamente.");
                await LoadTenants();
            }
            catch (Exception ex)
            {
                NotificationService.ShowError($"Error al eliminar empresa: {ex.Message}");
            }
        }
    }

    private Color GetStatusColor(bool isActive)
    {
        return isActive ? Color.Success : Color.Error;
    }

    private Color GetLicenseColor(string licenseType)
    {
        return licenseType.ToLower() switch
        {
            "basic" => Color.Info,
            "professional" => Color.Primary,
            "enterprise" => Color.Success,
            _ => Color.Default
        };
    }

    private string GetLicenseText(string licenseType)
    {
        return licenseType.ToLower() switch
        {
            "basic" => "Básica",
            "professional" => "Profesional",
            "enterprise" => "Empresarial",
            _ => licenseType
        };
    }

    // Mock data para pruebas - TODO: Remover cuando esté la API
    private async Task<List<TenantDto>> GetMockTenants()
    {
        await Task.Delay(1000); // Simular delay de API
        
        return new List<TenantDto>
        {
            new TenantDto
            {
                Id = 1,
                Name = "Empresa Demo S.L.",
                Subdomain = "empresa-demo",
                ContactName = "Juan Pérez",
                ContactEmail = "juan@empresa-demo.com",
                EmployeeCount = 25,
                LicenseType = "Professional",
                IsActive = true,
                CreatedAt = DateTime.Now.AddDays(-30)
            },
            new TenantDto
            {
                Id = 2,
                Name = "Tech Solutions",
                Subdomain = "tech-solutions",
                ContactName = "María García",
                ContactEmail = "maria@tech-solutions.com",
                EmployeeCount = 50,
                LicenseType = "Enterprise",
                IsActive = true,
                CreatedAt = DateTime.Now.AddDays(-45)
            },
            new TenantDto
            {
                Id = 3,
                Name = "StartUp Inc",
                Subdomain = "startup-inc",
                ContactName = "Carlos López",
                ContactEmail = "carlos@startup-inc.com",
                EmployeeCount = 5,
                LicenseType = "Basic",
                IsActive = false,
                CreatedAt = DateTime.Now.AddDays(-15)
            }
        };
    }

    // DTO temporal - TODO: Mover a Shared.Models
    public class TenantDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Subdomain { get; set; } = string.Empty;
        public string ContactName { get; set; } = string.Empty;
        public string ContactEmail { get; set; } = string.Empty;
        public int EmployeeCount { get; set; }
        public string LicenseType { get; set; } = string.Empty;
        public bool IsActive { get; set; }
        public DateTime CreatedAt { get; set; }
    }
}