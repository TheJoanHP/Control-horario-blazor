@page "/profile/security"
@using Sphere.Admin.Client.Services
@using Shared.Models.DTOs.Auth
@inject SphereApiService ApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject AuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Configuración de Seguridad | Sphere Admin</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-6">
    <!-- Header -->
    <div class="d-flex justify-space-between align-center mb-6">
        <div>
            <MudText Typo="Typo.h4" Class="mud-text-primary font-weight-bold">
                🔒 Configuración de Seguridad
            </MudText>
            <MudText Typo="Typo.body1" Class="mud-text-secondary">
                Gestiona la seguridad de tu cuenta y configuración de autenticación
            </MudText>
        </div>
        
        <MudButton Variant="Variant.Outlined"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   OnClick="@(() => Navigation.NavigateTo("/profile"))">
            Volver al Perfil
        </MudButton>
    </div>

    @if (_loading)
    {
        <div class="d-flex justify-center align-center" style="height: 400px;">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
        </div>
    }
    else
    {
        <MudGrid>
            <!-- Cambiar contraseña -->
            <MudItem xs="12" md="8">
                <MudCard Class="mb-6">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">🔑 Cambiar Contraseña</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudForm @ref="_passwordForm" @bind-IsValid="_passwordFormValid">
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudTextField @bind-Value="_passwordChange.CurrentPassword"
                                                  Label="Contraseña Actual"
                                                  Variant="Variant.Outlined"
                                                  InputType="InputType.Password"
                                                  FullWidth="true"
                                                  Required="true"
                                                  RequiredError="La contraseña actual es requerida"
                                                  For="@(() => _passwordChange.CurrentPassword)" />
                                </MudItem>
                                
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="_passwordChange.NewPassword"
                                                  Label="Nueva Contraseña"
                                                  Variant="Variant.Outlined"
                                                  InputType="InputType.Password"
                                                  FullWidth="true"
                                                  Required="true"
                                                  RequiredError="La nueva contraseña es requerida"
                                                  Validation="@(new Func<string, IEnumerable<string>>(ValidatePassword))"
                                                  For="@(() => _passwordChange.NewPassword)" />
                                </MudItem>
                                
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="_passwordChange.ConfirmPassword"
                                                  Label="Confirmar Nueva Contraseña"
                                                  Variant="Variant.Outlined"
                                                  InputType="InputType.Password"
                                                  FullWidth="true"
                                                  Required="true"
                                                  RequiredError="Confirme la nueva contraseña"
                                                  Validation="@(new Func<string, string?>(ValidatePasswordConfirmation))"
                                                  For="@(() => _passwordChange.ConfirmPassword)" />
                                </MudItem>
                                
                                <MudItem xs="12">
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.Save"
                                               OnClick="ChangePassword"
                                               Loading="_changingPassword"
                                               Disabled="!_passwordFormValid">
                                        Cambiar Contraseña
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudForm>
                    </MudCardContent>
                </MudCard>

                <!-- Autenticación de dos factores -->
                <MudCard Class="mb-6">
                    <MudCardHeader>
                        <div class="d-flex justify-space-between align-center w-100">
                            <MudText Typo="Typo.h6">📱 Autenticación de Dos Factores (2FA)</MudText>
                            <MudChip T="string"
                                     Color="@(_securitySettings.TwoFactorEnabled ? Color.Success : Color.Error)"
                                     Variant="Variant.Filled"
                                     Size="Size.Small">
                                @(_securitySettings.TwoFactorEnabled ? "Habilitado" : "Deshabilitado")
                            </MudChip>
                        </div>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (!_securitySettings.TwoFactorEnabled)
                        {
                            <MudAlert Severity="Severity.Warning" Class="mb-4">
                                La autenticación de dos factores agrega una capa extra de seguridad a tu cuenta.
                                Se recomienda encarecidamente habilitarla.
                            </MudAlert>
                            
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Success"
                                       StartIcon="@Icons.Material.Filled.Security"
                                       OnClick="SetupTwoFactor"
                                       Loading="_settingUp2FA">
                                Configurar 2FA
                            </MudButton>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Success" Class="mb-4">
                                La autenticación de dos factores está habilitada. Tu cuenta está protegida.
                            </MudAlert>
                            
                            <div class="d-flex gap-2">
                                <MudButton Variant="Variant.Outlined"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.QrCode"
                                           OnClick="ShowBackupCodes">
                                    Ver Códigos de Respaldo
                                </MudButton>
                                
                                <MudButton Variant="Variant.Outlined"
                                           Color="Color.Warning"
                                           StartIcon="@Icons.Material.Filled.Refresh"
                                           OnClick="RegenerateCodes">
                                    Regenerar Códigos
                                </MudButton>
                                
                                <MudButton Variant="Variant.Outlined"
                                           Color="Color.Error"
                                           StartIcon="@Icons.Material.Filled.DisabledByDefault"
                                           OnClick="DisableTwoFactor">
                                    Deshabilitar 2FA
                                </MudButton>
                            </div>
                        }
                    </MudCardContent>
                </MudCard>

                <!-- Sesiones activas -->
                <MudCard>
                    <MudCardHeader>
                        <div class="d-flex justify-space-between align-center w-100">
                            <MudText Typo="Typo.h6">💻 Sesiones Activas</MudText>
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Error"
                                       Size="Size.Small"
                                       StartIcon="@Icons.Material.Filled.LogoutVariant"
                                       OnClick="TerminateAllSessions">
                                Cerrar Todas las Sesiones
                            </MudButton>
                        </div>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (_activeSessions?.Any() == true)
                        {
                            <MudTable Items="_activeSessions"
                                      Hover="true"
                                      Dense="true">
                                <HeaderContent>
                                    <MudTh>Dispositivo</MudTh>
                                    <MudTh>Ubicación</MudTh>
                                    <MudTh>IP</MudTh>
                                    <MudTh>Último Acceso</MudTh>
                                    <MudTh>Estado</MudTh>
                                    <MudTh>Acciones</MudTh>
                                </HeaderContent>
                                
                                <RowTemplate>
                                    <MudTd DataLabel="Dispositivo">
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@GetDeviceIcon(context.DeviceType)" 
                                                     Class="mr-2" />
                                            <div>
                                                <MudText Typo="Typo.body2" Class="font-weight-bold">
                                                    @context.DeviceName
                                                </MudText>
                                                <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                                    @context.Browser
                                                </MudText>
                                            </div>
                                        </div>
                                    </MudTd>
                                    
                                    <MudTd DataLabel="Ubicación">
                                        <MudText Typo="Typo.body2">
                                            @context.Location
                                        </MudText>
                                    </MudTd>
                                    
                                    <MudTd DataLabel="IP">
                                        <MudText Typo="Typo.body2" Class="font-family-monospace">
                                            @context.IpAddress
                                        </MudText>
                                    </MudTd>
                                    
                                    <MudTd DataLabel="Último Acceso">
                                        <MudText Typo="Typo.body2">
                                            @GetRelativeTime(context.LastActivity)
                                        </MudText>
                                    </MudTd>
                                    
                                    <MudTd DataLabel="Estado">
                                        <MudChip T="string"
                                                 Size="Size.Small"
                                                 Color="@(context.IsCurrent ? Color.Success : Color.Info)"
                                                 Variant="Variant.Filled">
                                            @(context.IsCurrent ? "Actual" : "Activa")
                                        </MudChip>
                                    </MudTd>
                                    
                                    <MudTd DataLabel="Acciones">
                                        @if (!context.IsCurrent)
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Logout"
                                                           Size="Size.Small"
                                                           Color="Color.Error"
                                                           OnClick="@(() => TerminateSession(context.Id))"
                                                           Title="Cerrar sesión" />
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                                Sesión actual
                                            </MudText>
                                        }
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Info">
                                No hay sesiones activas adicionales.
                            </MudAlert>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Panel lateral con información de seguridad -->
            <MudItem xs="12" md="4">
                <!-- Estado de seguridad -->
                <MudCard Class="mb-6">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">🛡️ Estado de Seguridad</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="d-flex flex-column gap-4">
                            <!-- Puntuación de seguridad -->
                            <div class="text-center">
                                <MudProgressCircular Size="Size.Large" 
                                                     Value="@_securityScore" 
                                                     Color="@GetSecurityScoreColor()"
                                                     StrokeWidth="8">
                                    <MudText Typo="Typo.h4" Class="font-weight-bold">
                                        @_securityScore%
                                    </MudText>
                                </MudProgressCircular>
                                <MudText Typo="Typo.body2" Class="mt-2">
                                    Puntuación de Seguridad
                                </MudText>
                            </div>
                            
                            <!-- Checklist de seguridad -->
                            <MudDivider />
                            
                            <div class="d-flex align-center">
                                <MudIcon Icon="@(_securitySettings.TwoFactorEnabled ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.RadioButtonUnchecked)"
                                         Color="@(_securitySettings.TwoFactorEnabled ? Color.Success : Color.Error)"
                                         Class="mr-2" />
                                <MudText Typo="Typo.body2">
                                    Autenticación 2FA
                                </MudText>
                            </div>
                            
                            <div class="d-flex align-center">
                                <MudIcon Icon="@(_securitySettings.StrongPassword ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.RadioButtonUnchecked)"
                                         Color="@(_securitySettings.StrongPassword ? Color.Success : Color.Warning)"
                                         Class="mr-2" />
                                <MudText Typo="Typo.body2">
                                    Contraseña Fuerte
                                </MudText>
                            </div>
                            
                            <div class="d-flex align-center">
                                <MudIcon Icon="@(_securitySettings.RecentPasswordChange ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.RadioButtonUnchecked)"
                                         Color="@(_securitySettings.RecentPasswordChange ? Color.Success : Color.Warning)"
                                         Class="mr-2" />
                                <MudText Typo="Typo.body2">
                                    Contraseña Actualizada
                                </MudText>
                            </div>
                            
                            <div class="d-flex align-center">
                                <MudIcon Icon="@(_securitySettings.SecurityNotifications ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.RadioButtonUnchecked)"
                                         Color="@(_securitySettings.SecurityNotifications ? Color.Success : Color.Warning)"
                                         Class="mr-2" />
                                <MudText Typo="Typo.body2">
                                    Alertas de Seguridad
                                </MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>

                <!-- Actividad reciente -->
                <MudCard Class="mb-6">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">📊 Actividad de Seguridad</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="d-flex flex-column gap-3">
                            <div>
                                <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                    Último Cambio de Contraseña
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    @(_securitySettings.LastPasswordChange?.ToString("dd/MM/yyyy") ?? "Nunca")
                                </MudText>
                            </div>
                            
                            <div>
                                <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                    Intentos de Login Fallidos
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    @_securitySettings.FailedLoginAttempts en los últimos 30 días
                                </MudText>
                            </div>
                            
                            <div>
                                <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                    Dispositivos Autorizados
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    @_securitySettings.TrustedDevices dispositivos
                                </MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>

                <!-- Consejos de seguridad -->
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">💡 Consejos de Seguridad</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="d-flex flex-column gap-2">
                            <MudAlert Severity="Severity.Info" Dense="true">
                                Usa una contraseña única y fuerte para tu cuenta.
                            </MudAlert>
                            
                            <MudAlert Severity="Severity.Info" Dense="true">
                                Habilita la autenticación de dos factores para mayor seguridad.
                            </MudAlert>
                            
                            <MudAlert Severity="Severity.Info" Dense="true">
                                Revisa regularmente tus sesiones activas.
                            </MudAlert>
                            
                            <MudAlert Severity="Severity.Info" Dense="true">
                                No compartas tus códigos de acceso con nadie.
                            </MudAlert>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

<!-- Dialog para configurar 2FA -->
<MudDialog @bind-IsVisible="_show2FASetupDialog" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">📱 Configurar Autenticación 2FA</MudText>
    </TitleContent>
    
    <DialogContent>
        @if (_2faSetupStep == 1)
        {
            <div class="text-center">
                <MudText Typo="Typo.h6" Class="mb-4">Paso 1: Escanea el código QR</MudText>
                
                <div class="d-flex justify-center mb-4">
                    <img src="@_qrCodeDataUrl" alt="QR Code" style="width: 200px; height: 200px;" />
                </div>
                
                <MudText Typo="Typo.body2" Class="mb-2">
                    Escanea este código QR con tu aplicación de autenticación:
                </MudText>
                
                <MudChip T="string" 
                         Color="Color.Primary" 
                         Variant="Variant.Outlined"
                         OnClick="CopySecretKey">
                    @_manualEntryKey
                </MudChip>
                
                <MudText Typo="Typo.caption" Class="mt-2 mud-text-secondary">
                    Haz clic para copiar la clave secreta
                </MudText>
            </div>
        }
        else
        {
            <div class="text-center">
                <MudText Typo="Typo.h6" Class="mb-4">Paso 2: Verificar Configuración</MudText>
                
                <MudTextField @bind-Value="_verificationCode"
                              Label="Código de Verificación"
                              Variant="Variant.Outlined"
                              FullWidth="true"
                              Placeholder="000000"
                              MaxLength="6"
                              Class="mb-4" />
                
                <MudText Typo="Typo.body2" Class="mud-text-secondary">
                    Ingresa el código de 6 dígitos de tu aplicación de autenticación
                </MudText>
            </div>
        }
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel2FASetup">Cancelar</MudButton>
        
        @if (_2faSetupStep == 1)
        {
            <MudButton Color="Color.Primary" 
                       Variant="Variant.Filled"
                       OnClick="NextStep2FA">
                Siguiente
            </MudButton>
        }
        else
        {
            <MudButton Color="Color.Primary" 
                       Variant="Variant.Filled"
                       OnClick="Complete2FASetup"
                       Loading="_completing2FA">
                Completar Configuración
            </MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    // Variables privadas
    private bool _loading = true;
    private bool _changingPassword = false;
    private bool _settingUp2FA = false;
    private bool _completing2FA = false;
    private bool _passwordFormValid = false;
    
    // Formularios
    private MudForm? _passwordForm;
    private ChangePasswordDto _passwordChange = new();
    
    // Datos
    private SecuritySettingsDto _securitySettings = new();
    private List<ActiveSessionDto>? _activeSessions;
    private int _securityScore = 75;
    
    // 2FA Setup
    private bool _show2FASetupDialog = false;
    private int _2faSetupStep = 1;
    private string _qrCodeDataUrl = string.Empty;
    private string _manualEntryKey = string.Empty;
    private string _verificationCode = string.Empty;
    private DialogOptions _dialogOptions = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        await LoadSecurityData();
    }

    private async Task LoadSecurityData()
    {
        _loading = true;
        try
        {
            _securitySettings = await ApiService.GetAsync<SecuritySettingsDto>("profile/security");
            _activeSessions = await ApiService.GetAsync<List<ActiveSessionDto>>("profile/sessions");
            
            CalculateSecurityScore();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error cargando datos de seguridad: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private void CalculateSecurityScore()
    {
        int score = 0;
        
        if (_securitySettings.TwoFactorEnabled) score += 40;
        if (_securitySettings.StrongPassword) score += 25;
        if (_securitySettings.RecentPasswordChange) score += 20;
        if (_securitySettings.SecurityNotifications) score += 15;
        
        _securityScore = score;
    }

    private async Task ChangePassword()
    {
        if (!_passwordFormValid) return;

        _changingPassword = true;
        try
        {
            await ApiService.PostAsync("profile/change-password", _passwordChange);
            Snackbar.Add("Contraseña cambiada exitosamente", Severity.Success);
            
            // Limpiar formulario
            _passwordChange = new ChangePasswordDto();
            await _passwordForm!.ResetAsync();
            
            // Recargar datos de seguridad
            await LoadSecurityData();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error cambiando contraseña: {ex.Message}", Severity.Error);
        }
        finally
        {
            _changingPassword = false;
        }
    }

    private async Task SetupTwoFactor()
    {
        _settingUp2FA = true;
        try
        {
            var setupData = await ApiService.GetAsync<TwoFactorSetupDto>("profile/2fa/setup");
            _qrCodeDataUrl = setupData.QrCodeDataUrl;
            _manualEntryKey = setupData.ManualEntryKey;
            _2faSetupStep = 1;
            _show2FASetupDialog = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error configurando 2FA: {ex.Message}", Severity.Error);
        }
        finally
        {
            _settingUp2FA = false;
        }
    }

    private void NextStep2FA()
    {
        _2faSetupStep = 2;
    }

    private async Task Complete2FASetup()
    {
        if (string.IsNullOrEmpty(_verificationCode) || _verificationCode.Length != 6)
        {
            Snackbar.Add("Por favor ingresa un código de 6 dígitos válido", Severity.Error);
            return;
        }

        _completing2FA = true;
        try
        {
            var verifyRequest = new VerifyTwoFactorDto
            {
                Code = _verificationCode
            };

            var result = await ApiService.PostAsync<TwoFactorEnableResult>("profile/2fa/enable", verifyRequest);
            
            if (result.Success)
            {
                Snackbar.Add("2FA habilitado exitosamente", Severity.Success);
                _show2FASetupDialog = false;
                await LoadSecurityData();
                
                // Mostrar códigos de respaldo
                await ShowBackupCodes();
            }
            else
            {
                Snackbar.Add("Código de verificación inválido", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error habilitando 2FA: {ex.Message}", Severity.Error);
        }
        finally
        {
            _completing2FA = false;
        }
    }

    private void Cancel2FASetup()
    {
        _show2FASetupDialog = false;
        _2faSetupStep = 1;
        _verificationCode = string.Empty;
    }

    private async Task CopySecretKey()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _manualEntryKey);
        Snackbar.Add("Clave secreta copiada al portapapeles", Severity.Success);
    }

    private async Task ShowBackupCodes()
    {
        try
        {
            var codes = await ApiService.GetAsync<List<string>>("profile/2fa/backup-codes");
            
            var parameters = new DialogParameters
            {
                ["BackupCodes"] = codes
            };

            await DialogService.ShowAsync<BackupCodesDialog>("Códigos de Respaldo 2FA", parameters);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error obteniendo códigos de respaldo: {ex.Message}", Severity.Error);
        }
    }

    private async Task RegenerateCodes()
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = "¿Está seguro de que desea regenerar los códigos de respaldo? Los códigos actuales dejarán de funcionar.",
            ["ButtonText"] = "Regenerar",
            ["Color"] = Color.Warning
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirmar Regeneración", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var newCodes = await ApiService.PostAsync<List<string>>("profile/2fa/regenerate-codes", null);
                
                var dialogParams = new DialogParameters
                {
                    ["BackupCodes"] = newCodes
                };

                await DialogService.ShowAsync<BackupCodesDialog>("Nuevos Códigos de Respaldo", dialogParams);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error regenerando códigos: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task DisableTwoFactor()
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = "⚠️ ¿Está seguro de que desea deshabilitar la autenticación de dos factores? Esto reducirá la seguridad de su cuenta.",
            ["ButtonText"] = "Deshabilitar",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirmar Deshabilitación", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await ApiService.PostAsync("profile/2fa/disable", null);
                Snackbar.Add("2FA deshabilitado", Severity.Warning);
                await LoadSecurityData();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deshabilitando 2FA: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task TerminateSession(Guid sessionId)
    {
        try
        {
            await ApiService.DeleteAsync($"profile/sessions/{sessionId}");
            Snackbar.Add("Sesión terminada", Severity.Success);
            await LoadSecurityData();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error terminando sesión: {ex.Message}", Severity.Error);
        }
    }

    private async Task TerminateAllSessions()
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = "¿Está seguro de que desea cerrar todas las sesiones activas? Tendrá que volver a iniciar sesión en todos los dispositivos.",
            ["ButtonText"] = "Cerrar Todas",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirmar Cierre de Sesiones", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await ApiService.PostAsync("profile/sessions/terminate-all", null);
                Snackbar.Add("Todas las sesiones han sido cerradas", Severity.Success);
                
                // Redirigir al login ya que la sesión actual también se cerrará
                await AuthService.LogoutAsync();
                Navigation.NavigateTo("/login");
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error cerrando sesiones: {ex.Message}", Severity.Error);
            }
        }
    }

    // Validaciones
    private IEnumerable<string> ValidatePassword(string password)
    {
        if (string.IsNullOrEmpty(password))
            yield break;

        if (password.Length < 8)
            yield return "La contraseña debe tener al menos 8 caracteres";

        if (!password.Any(char.IsUpper))
            yield return "La contraseña debe contener al menos una letra mayúscula";

        if (!password.Any(char.IsLower))
            yield return "La contraseña debe contener al menos una letra minúscula";

        if (!password.Any(char.IsDigit))
            yield return "La contraseña debe contener al menos un número";

        if (!password.Any(ch => !char.IsLetterOrDigit(ch)))
            yield return "La contraseña debe contener al menos un carácter especial";
    }

    private string? ValidatePasswordConfirmation(string confirmPassword)
    {
        if (confirmPassword != _passwordChange.NewPassword)
            return "Las contraseñas no coinciden";

        return null;
    }

    // Métodos de utilidad
    private string GetDeviceIcon(string deviceType)
    {
        return deviceType.ToLower() switch
        {
            "mobile" => Icons.Material.Filled.PhoneAndroid,
            "tablet" => Icons.Material.Filled.Tablet,
            "desktop" => Icons.Material.Filled.Computer,
            _ => Icons.Material.Filled.DeviceUnknown
        };
    }

    private Color GetSecurityScoreColor()
    {
        return _securityScore switch
        {
            >= 80 => Color.Success,
            >= 60 => Color.Warning,
            _ => Color.Error
        };
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;
        
        if (timeSpan.TotalDays >= 1)
            return $"Hace {(int)timeSpan.TotalDays} día(s)";
        
        if (timeSpan.TotalHours >= 1)
            return $"Hace {(int)timeSpan.TotalHours} hora(s)";
        
        if (timeSpan.TotalMinutes >= 1)
            return $"Hace {(int)timeSpan.TotalMinutes} minuto(s)";
        
        return "Ahora mismo";
    }

    // DTOs
    public class ChangePasswordDto
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    public class SecuritySettingsDto
    {
        public bool TwoFactorEnabled { get; set; }
        public bool StrongPassword { get; set; }
        public bool RecentPasswordChange { get; set; }
        public bool SecurityNotifications { get; set; }
        public DateTime? LastPasswordChange { get; set; }
        public int FailedLoginAttempts { get; set; }
        public int TrustedDevices { get; set; }
    }

    public class ActiveSessionDto
    {
        public Guid Id { get; set; }
        public string DeviceName { get; set; } = string.Empty;
        public string DeviceType { get; set; } = string.Empty;
        public string Browser { get; set; } = string.Empty;
        public string Location { get; set; } = string.Empty;
        public string IpAddress { get; set; } = string.Empty;
        public DateTime LastActivity { get; set; }
        public bool IsCurrent { get; set; }
    }

    public class TwoFactorSetupDto
    {
        public string QrCodeDataUrl { get; set; } = string.Empty;
        public string ManualEntryKey { get; set; } = string.Empty;
    }

    public class VerifyTwoFactorDto
    {
        public string Code { get; set; } = string.Empty;
    }

    public class TwoFactorEnableResult
    {
        public bool Success { get; set; }
        public List<string> BackupCodes { get; set; } = new();
    }
}@page "/profile/security"
@using Sphere.Admin.Client.Services
@using Shared.Models.DTOs.Auth
@inject SphereApiService ApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject AuthService AuthService
@inject NavigationManager Navigation