@* Ruta: Sphere.Admin.Client/Pages/Profile/Security.razor *@
@page "/profile/security"
@using Sphere.Admin.Client.Services
@using Sphere.Admin.Client.Components.Common
@using Shared.Models.DTOs.Auth
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Configuración de Seguridad | Sphere Admin</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-6">
    <!-- Header -->
    <div class="d-flex justify-space-between align-center mb-6">
        <div>
            <MudText Typo="Typo.h4" Class="mud-text-primary font-weight-bold">
                🔒 Configuración de Seguridad
            </MudText>
            <MudText Typo="Typo.body1" Class="mud-text-secondary">
                Gestiona la seguridad de tu cuenta y configuración de autenticación
            </MudText>
        </div>
        
        <MudButton Variant="Variant.Outlined"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   OnClick="@(() => Navigation.NavigateTo("/profile"))">
            Volver al Perfil
        </MudButton>
    </div>

    @if (_loading)
    {
        <div class="d-flex justify-center align-center" style="height: 400px;">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
        </div>
    }
    else
    {
        <MudGrid>
            <!-- Cambiar contraseña -->
            <MudItem xs="12" md="8">
                <MudCard Class="mb-6">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">🔑 Cambiar Contraseña</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudForm @ref="_passwordForm" @bind-IsValid="_passwordFormValid">
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudTextField T="string" 
                                                  @bind-Value="_currentPassword"
                                                  Label="Contraseña Actual"
                                                  Variant="Variant.Outlined"
                                                  InputType="@_currentPasswordInput"
                                                  Adornment="Adornment.End"
                                                  AdornmentIcon="@_currentPasswordIcon"
                                                  OnAdornmentClick="ToggleCurrentPasswordVisibility"
                                                  Required="true"
                                                  RequiredError="La contraseña actual es requerida" />
                                </MudItem>
                                
                                <MudItem xs="12" md="6">
                                    <MudTextField T="string" 
                                                  @bind-Value="_newPassword"
                                                  Label="Nueva Contraseña"
                                                  Variant="Variant.Outlined"
                                                  InputType="@_newPasswordInput"
                                                  Adornment="Adornment.End"
                                                  AdornmentIcon="@_newPasswordIcon"
                                                  OnAdornmentClick="ToggleNewPasswordVisibility"
                                                  Required="true"
                                                  RequiredError="La nueva contraseña es requerida"
                                                  Validation="@(new Func<string, string?>(ValidatePassword))" />
                                </MudItem>
                                
                                <MudItem xs="12" md="6">
                                    <MudTextField T="string" 
                                                  @bind-Value="_confirmPassword"
                                                  Label="Confirmar Nueva Contraseña"
                                                  Variant="Variant.Outlined"
                                                  InputType="@_confirmPasswordInput"
                                                  Adornment="Adornment.End"
                                                  AdornmentIcon="@_confirmPasswordIcon"
                                                  OnAdornmentClick="ToggleConfirmPasswordVisibility"
                                                  Required="true"
                                                  RequiredError="Debe confirmar la contraseña"
                                                  Validation="@(new Func<string, string?>(ValidatePasswordMatch))" />
                                </MudItem>
                                
                                <MudItem xs="12">
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        La contraseña debe tener al menos 8 caracteres, incluir mayúsculas, minúsculas, números y caracteres especiales.
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        </MudForm>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Color="Color.Primary" 
                                   Variant="Variant.Filled"
                                   Disabled="@(!_passwordFormValid || _changingPassword)"
                                   OnClick="ChangePasswordAsync">
                            @if (_changingPassword)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                            }
                            Cambiar Contraseña
                        </MudButton>
                    </MudCardActions>
                </MudCard>

                <!-- Autenticación de dos factores -->
                <MudCard Class="mb-6">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">📱 Autenticación de Dos Factores (2FA)</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (_twoFactorEnabled)
                        {
                            <MudAlert Severity="Severity.Success" Class="mb-4">
                                <MudText>
                                    La autenticación de dos factores está activa. Tu cuenta está protegida.
                                </MudText>
                            </MudAlert>
                            
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudButton Variant="Variant.Outlined"
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.Refresh"
                                               FullWidth="true"
                                               OnClick="RegenerateCodes">
                                        Regenerar Códigos de Respaldo
                                    </MudButton>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudButton Variant="Variant.Outlined"
                                               Color="Color.Error"
                                               StartIcon="@Icons.Material.Filled.RemoveCircle"
                                               FullWidth="true"
                                               OnClick="Disable2FA">
                                        Desactivar 2FA
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Warning" Class="mb-4">
                                <MudText>
                                    La autenticación de dos factores no está activa. Te recomendamos activarla para mayor seguridad.
                                </MudText>
                            </MudAlert>
                            
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Success"
                                       StartIcon="@Icons.Material.Filled.Security"
                                       OnClick="Enable2FA">
                                Activar Autenticación de Dos Factores
                            </MudButton>
                        }
                    </MudCardContent>
                </MudCard>

                <!-- Sesiones activas -->
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">💻 Sesiones Activas</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Refresh" 
                                           Color="Color.Default"
                                           OnClick="LoadActiveSessions" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (_activeSessions?.Any() == true)
                        {
                            <MudSimpleTable Hover="true" Striped="true" Bordered="true">
                                <thead>
                                    <tr>
                                        <th>Dispositivo</th>
                                        <th>Ubicación</th>
                                        <th>Última Actividad</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var session in _activeSessions)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-center">
                                                    <MudIcon Icon="@GetDeviceIcon(session.DeviceType)" 
                                                             Size="Size.Small" 
                                                             Class="mr-2" />
                                                    <div>
                                                        <MudText Typo="Typo.body2">@session.DeviceName</MudText>
                                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                            @session.Browser
                                                        </MudText>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <MudText Typo="Typo.body2">@session.Location</MudText>
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                    @session.IpAddress
                                                </MudText>
                                            </td>
                                            <td>
                                                <MudText Typo="Typo.body2">
                                                    @session.LastActivity.ToString("dd/MM/yyyy HH:mm")
                                                </MudText>
                                                @if (session.IsCurrent)
                                                {
                                                    <MudChip Size="Size.Small" Color="Color.Success">
                                                        Sesión Actual
                                                    </MudChip>
                                                }
                                            </td>
                                            <td>
                                                @if (!session.IsCurrent)
                                                {
                                                    <MudIconButton Icon="@Icons.Material.Filled.Logout"
                                                                   Color="Color.Error"
                                                                   Size="Size.Small"
                                                                   OnClick="@(() => RevokeSession(session.Id))" />
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </MudSimpleTable>
                            
                            <MudDivider Class="my-4" />
                            
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.ExitToApp"
                                       OnClick="RevokeAllSessions">
                                Cerrar Todas las Demás Sesiones
                            </MudButton>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center">
                                No hay sesiones activas
                            </MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
            @* Ruta: Sphere.Admin.Client/Pages/Profile/Security.razor - Continuación *@

            <!-- Sidebar de seguridad -->
            <MudItem xs="12" md="4">
                <!-- Estado de seguridad -->
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">Estado de Seguridad</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="d-flex justify-center mb-4">
                            <MudProgressCircular Value="@_securityScore" 
                                                 Size="Size.Large"
                                                 Color="@GetSecurityColor()"
                                                 StrokeWidth="8">
                                <MudText Typo="Typo.h5">@_securityScore%</MudText>
                            </MudProgressCircular>
                        </div>
                        
                        <MudText Typo="Typo.body2" Align="Align.Center" Class="mb-4">
                            Tu nivel de seguridad es @GetSecurityLevel()
                        </MudText>
                        
                        <MudList T="string">
                            <MudListItem T="string" Icon="@GetCheckIcon(_hasStrongPassword)" IconColor="@GetCheckColor(_hasStrongPassword)">
                                <MudText Typo="Typo.body2">Contraseña segura</MudText>
                            </MudListItem>
                            <MudListItem T="string" Icon="@GetCheckIcon(_twoFactorEnabled)" IconColor="@GetCheckColor(_twoFactorEnabled)">
                                <MudText Typo="Typo.body2">2FA activado</MudText>
                            </MudListItem>
                            <MudListItem T="string" Icon="@GetCheckIcon(_hasBackupCodes)" IconColor="@GetCheckColor(_hasBackupCodes)">
                                <MudText Typo="Typo.body2">Códigos de respaldo</MudText>
                            </MudListItem>
                            <MudListItem T="string" Icon="@GetCheckIcon(_hasRecentPasswordChange)" IconColor="@GetCheckColor(_hasRecentPasswordChange)">
                                <MudText Typo="Typo.body2">Contraseña actualizada</MudText>
                            </MudListItem>
                        </MudList>
                    </MudCardContent>
                </MudCard>

                <!-- Recomendaciones de seguridad -->
                <MudCard Class="mt-4">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">Recomendaciones</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.body2" Class="mb-3">
                            Para mantener tu cuenta segura:
                        </MudText>
                        <MudList T="string" Dense="true">
                            <MudListItem T="string">
                                <MudText Typo="Typo.caption">
                                    • Usa una contraseña única y compleja
                                </MudText>
                            </MudListItem>
                            <MudListItem T="string">
                                <MudText Typo="Typo.caption">
                                    • Activa la autenticación de dos factores
                                </MudText>
                            </MudListItem>
                            <MudListItem T="string">
                                <MudText Typo="Typo.caption">
                                    • Revisa regularmente las sesiones activas
                                </MudText>
                            </MudListItem>
                            <MudListItem T="string">
                                <MudText Typo="Typo.caption">
                                    • Cambia tu contraseña cada 3 meses
                                </MudText>
                            </MudListItem>
                            <MudListItem T="string">
                                <MudText Typo="Typo.caption">
                                    • No compartas tus credenciales
                                </MudText>
                            </MudListItem>
                        </MudList>
                    </MudCardContent>
                </MudCard>

                <!-- Registro de actividad de seguridad -->
                <MudCard Class="mt-4">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">Actividad Reciente</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (_securityEvents?.Any() == true)
                        {
                            <MudTimeline TimelinePosition="TimelinePosition.Start">
                                @foreach (var evt in _securityEvents.Take(5))
                                {
                                    <MudTimelineItem Color="@GetEventColor(evt.Type)" Size="Size.Small">
                                        <ItemContent>
                                            <MudText Typo="Typo.caption">@evt.Description</MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                @evt.Timestamp.ToString("dd/MM HH:mm")
                                            </MudText>
                                        </ItemContent>
                                    </MudTimelineItem>
                                }
                            </MudTimeline>
                        }
                        else
                        {
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Align="Align.Center">
                                Sin actividad reciente
                            </MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private MudForm _passwordForm = default!;
    private bool _passwordFormValid;
    private bool _loading = false;
    private bool _changingPassword = false;
    
    // Contraseña
    private string _currentPassword = string.Empty;
    private string _newPassword = string.Empty;
    private string _confirmPassword = string.Empty;
    private InputType _currentPasswordInput = InputType.Password;
    private InputType _newPasswordInput = InputType.Password;
    private InputType _confirmPasswordInput = InputType.Password;
    private string _currentPasswordIcon = Icons.Material.Filled.VisibilityOff;
    private string _newPasswordIcon = Icons.Material.Filled.VisibilityOff;
    private string _confirmPasswordIcon = Icons.Material.Filled.VisibilityOff;
    
    // 2FA
    private bool _twoFactorEnabled = false;
    private bool _hasBackupCodes = false;
    
    // Seguridad
    private int _securityScore = 75;
    private bool _hasStrongPassword = true;
    private bool _hasRecentPasswordChange = true;
    
    // Sesiones
    private List<SessionInfo>? _activeSessions;
    private List<SecurityEvent>? _securityEvents;

    protected override async Task OnInitializedAsync()
    {
        await LoadSecurityInfo();
        await LoadActiveSessions();
        await LoadSecurityEvents();
    }

    private async Task LoadSecurityInfo()
    {
        try
        {
            _loading = true;
            // Cargar información de seguridad desde la API
            await Task.Delay(500); // Simulación
            CalculateSecurityScore();
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task LoadActiveSessions()
    {
        // Simulación de sesiones activas
        _activeSessions = new List<SessionInfo>
        {
            new SessionInfo 
            { 
                Id = 1, 
                DeviceName = "Mi PC",
                @* Ruta: Sphere.Admin.Client/Pages/Profile/Security.razor - Continuación Final *@
                DeviceType = "Desktop",
                Browser = "Chrome 120.0",
                Location = "Madrid, España",
                IpAddress = "192.168.1.100",
                LastActivity = DateTime.Now,
                IsCurrent = true
            },
            new SessionInfo 
            { 
                Id = 2, 
                DeviceName = "iPhone 14", 
                DeviceType = "Mobile",
                Browser = "Safari 17.0",
                Location = "Barcelona, España",
                IpAddress = "85.123.45.67",
                LastActivity = DateTime.Now.AddHours(-2),
                IsCurrent = false
            }
        };
    }

    private async Task LoadSecurityEvents()
    {
        // Simulación de eventos de seguridad
        _securityEvents = new List<SecurityEvent>
        {
            new SecurityEvent 
            { 
                Type = "success", 
                Description = "Inicio de sesión exitoso",
                Timestamp = DateTime.Now.AddHours(-1)
            },
            new SecurityEvent 
            { 
                Type = "warning", 
                Description = "Intento de acceso desde nueva ubicación",
                Timestamp = DateTime.Now.AddDays(-1)
            },
            new SecurityEvent 
            { 
                Type = "info", 
                Description = "Contraseña actualizada",
                Timestamp = DateTime.Now.AddDays(-7)
            }
        };
    }

    private void CalculateSecurityScore()
    {
        int score = 25; // Base
        if (_hasStrongPassword) score += 25;
        if (_twoFactorEnabled) score += 25;
        if (_hasBackupCodes) score += 15;
        if (_hasRecentPasswordChange) score += 10;
        _securityScore = Math.Min(score, 100);
    }

    private async Task ChangePasswordAsync()
    {
        if (!_passwordFormValid) return;

        try
        {
            _changingPassword = true;
            
            var request = new ChangePasswordRequest
            {
                CurrentPassword = _currentPassword,
                NewPassword = _newPassword,
                ConfirmPassword = _confirmPassword
            };
            
            var success = await ApiService.ChangePasswordAsync(request);
            
            if (success)
            {
                Snackbar.Add("Contraseña actualizada correctamente", Severity.Success);
                _currentPassword = string.Empty;
                _newPassword = string.Empty;
                _confirmPassword = string.Empty;
                _hasRecentPasswordChange = true;
                CalculateSecurityScore();
            }
            else
            {
                Snackbar.Add("Error al cambiar la contraseña", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error al cambiar la contraseña", Severity.Error);
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            _changingPassword = false;
        }
    }

    private async Task Enable2FA()
    {
        var options = new DialogOptions 
        { 
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };
        
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Activar 2FA", options);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            // Aquí iría la lógica para activar 2FA
            _twoFactorEnabled = true;
            _hasBackupCodes = true;
            CalculateSecurityScore();
            
            // Mostrar códigos de respaldo
            await ShowBackupCodes();
            
            Snackbar.Add("2FA activado correctamente", Severity.Success);
        }
    }

    private async Task Disable2FA()
    {
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { x => x.Title, "Desactivar 2FA" },
            { x => x.Message, "¿Estás seguro de que deseas desactivar la autenticación de dos factores? Tu cuenta será menos segura." },
            { x => x.Type, ConfirmDialog.DialogType.Warning },
            { x => x.ConfirmButtonText, "Desactivar" },
            { x => x.RequireConfirmation, true },
            { x => x.ConfirmationWord, "DESACTIVAR" }
        };
        
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Desactivar 2FA", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            _twoFactorEnabled = false;
            _hasBackupCodes = false;
            CalculateSecurityScore();
            Snackbar.Add("2FA desactivado", Severity.Warning);
        }
    }

    private async Task RegenerateCodes()
    {
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { x => x.Title, "Regenerar Códigos" },
            { x => x.Message, "¿Deseas regenerar los códigos de respaldo? Los códigos anteriores dejarán de funcionar." },
            { x => x.Type, ConfirmDialog.DialogType.Warning }
        };
        
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Regenerar Códigos", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            await ShowBackupCodes();
            Snackbar.Add("Códigos regenerados correctamente", Severity.Success);
        }
    }

    private async Task ShowBackupCodes()
    {
        var parameters = new DialogParameters<BackupCodesDialog>();
        var options = new DialogOptions 
        { 
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            DisableBackdropClick = true
        };
        
        await DialogService.ShowAsync<BackupCodesDialog>("Códigos de Respaldo", parameters, options);
    }

    private async Task RevokeSession(int sessionId)
    {
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { x => x.Title, "Cerrar Sesión" },
            { x => x.Message, "¿Deseas cerrar esta sesión? El dispositivo deberá iniciar sesión nuevamente." },
            { x => x.Type, ConfirmDialog.DialogType.Warning }
        };
        
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Cerrar Sesión", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            _activeSessions?.RemoveAll(s => s.Id == sessionId);
            Snackbar.Add("Sesión cerrada correctamente", Severity.Success);
        }
    }

    private async Task RevokeAllSessions()
    {
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { x => x.Title, "Cerrar Todas las Sesiones" },
            { x => x.Message, "¿Deseas cerrar todas las demás sesiones? Todos los dispositivos deberán iniciar sesión nuevamente." },
            { x => x.Type, ConfirmDialog.DialogType.Warning },
            { x => x.RequireConfirmation, true },
            { x => x.ConfirmationWord, "CERRAR TODAS" }
        };
        
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Cerrar Sesiones", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            _activeSessions?.RemoveAll(s => !s.IsCurrent);
            Snackbar.Add("Todas las sesiones han sido cerradas", Severity.Success);
        }
    }

    // Métodos de utilidad
    private void ToggleCurrentPasswordVisibility()
    {
        if (_currentPasswordInput == InputType.Password)
        {
            _currentPasswordInput = InputType.Text;
            _currentPasswordIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            _currentPasswordInput = InputType.Password;
            _currentPasswordIcon = Icons.Material.Filled.VisibilityOff;
        }
    }

    private void ToggleNewPasswordVisibility()
    {
        if (_newPasswordInput == InputType.Password)
        {
            _newPasswordInput = InputType.Text;
            _newPasswordIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            _newPasswordInput = InputType.Password;
            _newPasswordIcon = Icons.Material.Filled.VisibilityOff;
        }
    }

    private void ToggleConfirmPasswordVisibility()
    {
        if (_confirmPasswordInput == InputType.Password)
        {
            _confirmPasswordInput = InputType.Text;
            _confirmPasswordIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            _confirmPasswordInput = InputType.Password;
            _confirmPasswordIcon = Icons.Material.Filled.VisibilityOff;
        }
    }

    private string? ValidatePassword(string password)
    {
        if (string.IsNullOrEmpty(password))
            return "La contraseña es requerida";
        if (password.Length < 8)
            return "La contraseña debe tener al menos 8 caracteres";
        if (!password.Any(char.IsUpper))
            return "La contraseña debe contener al menos una mayúscula";
        if (!password.Any(char.IsLower))
            return "La contraseña debe contener al menos una minúscula";
        if (!password.Any(char.IsDigit))
            return "La contraseña debe contener al menos un número";
        if (!password.Any(ch => !char.IsLetterOrDigit(ch)))
            return "La contraseña debe contener al menos un carácter especial";
        return null;
    }

    private string? ValidatePasswordMatch(string confirmPassword)
    {
        if (string.IsNullOrEmpty(confirmPassword))
            return "Debe confirmar la contraseña";
        if (confirmPassword != _newPassword)
            return "Las contraseñas no coinciden";
        return null;
    }

    private Color GetSecurityColor()
    {
        return _securityScore switch
        {
            >= 80 => Color.Success,
            >= 60 => Color.Warning,
            _ => Color.Error
        };
    }

    private string GetSecurityLevel()
    {
        return _securityScore switch
        {
            >= 80 => "Excelente",
            >= 60 => "Bueno",
            >= 40 => "Regular",
            _ => "Bajo"
        };
    }

    private string GetCheckIcon(bool enabled)
    {
        return enabled ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Cancel;
    }

    private Color GetCheckColor(bool enabled)
    {
        return enabled ? Color.Success : Color.Error;
    }

    private string GetDeviceIcon(string deviceType)
    {
        return deviceType switch
        {
            "Mobile" => Icons.Material.Filled.PhoneAndroid,
            "Tablet" => Icons.Material.Filled.Tablet,
            "Desktop" => Icons.Material.Filled.Computer,
            _ => Icons.Material.Filled.Devices
        };
    }

    private Color GetEventColor(string type)
    {
        return type switch
        {
            "success" => Color.Success,
            "warning" => Color.Warning,
            "error" => Color.Error,
            _ => Color.Info
        };
    }

    // Clases auxiliares
    private class SessionInfo
    {
        public int Id { get; set; }
        public string DeviceName { get; set; } = string.Empty;
        public string DeviceType { get; set; } = string.Empty;
        public string Browser { get; set; } = string.Empty;
        public string Location { get; set; } = string.Empty;
        public string IpAddress { get; set; } = string.Empty;
        public DateTime LastActivity { get; set; }
        public bool IsCurrent { get; set; }
    }

    private class SecurityEvent
    {
        public string Type { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime Timestamp { get; set; }
    }

    private class ChangePasswordRequest
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}