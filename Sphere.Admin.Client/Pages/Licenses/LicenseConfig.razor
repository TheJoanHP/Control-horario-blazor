@page "/licenses/config"
@inject ApiService ApiService
@inject NotificationService NotificationService
@inject NavigationManager Navigation
@inject IDialogService DialogService

<PageTitle>Configuración de Planes - Sphere Admin</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="py-4">
    
    <!-- Breadcrumb -->
    <MudBreadcrumbs Items="_breadcrumbs" Class="mb-4" />
    
    <!-- Header -->
    <div class="d-flex justify-space-between align-center mb-6">
        <div>
            <MudText Typo="Typo.h4" Class="mud-text-primary font-weight-bold">
                Configuración de Planes
            </MudText>
            <MudText Typo="Typo.body1" Class="mud-text-secondary">
                Configure los planes de licencia, precios y características
            </MudText>
        </div>
        
        <MudButton Variant="Variant.Outlined"
                   Color="Color.Default"
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   OnClick="@(() => Navigation.NavigateTo("/licenses"))">
            Volver a Licencias
        </MudButton>
    </div>

    <!-- Configuración de planes -->
    <MudGrid>
        @foreach (var plan in _plans)
        {
            <MudItem xs="12" md="4">
                <MudCard Class="@($"h-100 {(plan.IsPopular ? "mud-elevation-8" : "")}")">
                    @if (plan.IsPopular)
                    {
                        <div class="d-flex justify-center">
                            <MudChip T="string" Color="Color.Primary" Variant="Variant.Filled" 
                                     Class="ma-2" Size="Size.Small">
                                <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" Class="mr-1" />
                                Más Popular
                            </MudChip>
                        </div>
                    }
                    
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div class="text-center">
                                <MudAvatar Color="@plan.Color" Size="Size.Large" Class="mb-3">
                                    <MudIcon Icon="@plan.Icon" Size="Size.Large" />
                                </MudAvatar>
                                <MudText Typo="Typo.h5" Class="font-weight-bold">
                                    @plan.Name
                                </MudText>
                                <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                    @plan.Description
                                </MudText>
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>
                    
                    <MudCardContent>
                        <!-- Precio -->
                        <div class="text-center mb-4">
                            <MudText Typo="Typo.h3" Class="font-weight-bold mud-text-primary">
                                @plan.MonthlyPrice.ToString("C")
                            </MudText>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                por mes
                            </MudText>
                        </div>
                        
                        <!-- Características -->
                        <MudList T="string" Dense="true">
                            @foreach (var feature in plan.Features)
                            {
                                <MudListItem T="string">
                                    <div class="d-flex align-center">
                                        <MudIcon Icon="@Icons.Material.Filled.Check" 
                                                 Color="Color.Success" 
                                                 Size="Size.Small" 
                                                 Class="mr-2" />
                                        <MudText Typo="Typo.body2">@feature</MudText>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                        
                        <!-- Límites -->
                        <MudDivider Class="my-3" />
                        <div class="d-flex justify-space-between align-center mb-2">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                Máximo empleados:
                            </MudText>
                            <MudText Typo="Typo.body2" Class="font-weight-bold">
                                @(plan.MaxEmployees == 0 ? "Ilimitado" : plan.MaxEmployees.ToString())
                            </MudText>
                        </div>
                        
                        <div class="d-flex justify-space-between align-center mb-2">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                Almacenamiento:
                            </MudText>
                            <MudText Typo="Typo.body2" Class="font-weight-bold">
                                @plan.StorageLimit
                            </MudText>
                        </div>
                        
                        <div class="d-flex justify-space-between align-center">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                Soporte:
                            </MudText>
                            <MudText Typo="Typo.body2" Class="font-weight-bold">
                                @plan.SupportLevel
                            </MudText>
                        </div>
                    </MudCardContent>
                    
                    <MudCardActions Class="justify-center pb-4">
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Edit"
                                   OnClick="@(() => EditPlan(plan))">
                            Editar Plan
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>

    <!-- Configuración global -->
    <MudCard Class="mt-6">
        <MudCardHeader>
            <CardHeaderContent>
                <div class="d-flex align-center">
                    <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-3" />
                    <MudText Typo="Typo.h6">Configuración Global</MudText>
                </div>
            </CardHeaderContent>
        </MudCardHeader>
        
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_globalConfig.TrialDays"
                                  Label="Días de prueba gratuita"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Number"
                                  HelperText="Número de días para nuevas empresas" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_globalConfig.GracePeriodDays"
                                  Label="Período de gracia"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Number"
                                  HelperText="Días adicionales después del vencimiento" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_globalConfig.DefaultCurrency"
                               Label="Moneda por defecto"
                               Variant="Variant.Outlined"
                               T="string">
                        <MudSelectItem Value="@("EUR")">Euro (EUR)</MudSelectItem>
                        <MudSelectItem Value="@("USD")">Dólar (USD)</MudSelectItem>
                        <MudSelectItem Value="@("GBP")">Libra (GBP)</MudSelectItem>
                    </MudSelect>
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudSwitch T="bool"
                               @bind-Value="_globalConfig.AutoRenewal"
                               Label="Renovación automática"
                               Color="Color.Primary" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudSwitch T="bool"
                               @bind-Value="_globalConfig.EmailNotifications"
                               Label="Notificaciones por email"
                               Color="Color.Primary" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="_globalConfig.LicenseTerms"
                                  Label="Términos de licencia"
                                  Variant="Variant.Outlined"
                                  Lines="4"
                                  HelperText="Términos y condiciones para las licencias" />
                </MudItem>
            </MudGrid>
        </MudCardContent>
        
        <MudCardActions>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Save"
                       OnClick="SaveGlobalConfig"
                       Disabled="@_isSaving">
                @if (_isSaving)
                {
                    <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                    <span>Guardando...</span>
                }
                else
                {
                    <span>Guardar Configuración</span>
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

<!-- Dialog para editar plan -->
<MudDialog @bind-Visible="_showEditDialog" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" />
            Editar Plan: @_editingPlan?.Name
        </MudText>
    </TitleContent>
    
    <DialogContent>
        @if (_editingPlan != null)
        {
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_editingPlan.Name"
                                  Label="Nombre del plan"
                                  Variant="Variant.Outlined"
                                  Required="true" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudNumericField @bind-Value="_editingPlan.MonthlyPrice"
                                     Label="Precio mensual"
                                     Variant="Variant.Outlined"
                                     Format="C"
                                     Min="0" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="_editingPlan.Description"
                                  Label="Descripción"
                                  Variant="Variant.Outlined"
                                  Lines="2" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudNumericField @bind-Value="_editingPlan.MaxEmployees"
                                     Label="Máximo empleados"
                                     Variant="Variant.Outlined"
                                     Min="0"
                                     HelperText="0 = Ilimitado" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_editingPlan.StorageLimit"
                                  Label="Límite de almacenamiento"
                                  Variant="Variant.Outlined" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_editingPlan.SupportLevel"
                               Label="Nivel de soporte"
                               Variant="Variant.Outlined"
                               T="string">
                        <MudSelectItem Value="@("Email")">Email</MudSelectItem>
                        <MudSelectItem Value="@("Chat")">Chat</MudSelectItem>
                        <MudSelectItem Value="@("Teléfono")">Teléfono</MudSelectItem>
                        <MudSelectItem Value="@("24/7")">24/7 Premium</MudSelectItem>
                    </MudSelect>
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudSwitch T="bool"
                               @bind-Value="_editingPlan.IsPopular"
                               Label="Plan popular"
                               Color="Color.Primary" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle2" Class="mb-2">Características del plan:</MudText>
                    @for (int i = 0; i < _editingPlan.Features.Count; i++)
                    {
                        int index = i; // Capturar variable para el closure
                        <div class="d-flex align-center mb-2">
                            <MudTextField @bind-Value="_editingPlan.Features[index]"
                                          Variant="Variant.Outlined"
                                          Dense="true"
                                          Class="flex-grow-1 mr-2" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error"
                                           Size="Size.Small"
                                           OnClick="@(() => RemoveFeature(index))" />
                        </div>
                    }
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="AddFeature">
                        Agregar Característica
                    </MudButton>
                </MudItem>
            </MudGrid>
        }
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="CancelEdit">Cancelar</MudButton>
        <MudButton Color="Color.Primary" 
                   Variant="Variant.Filled" 
                   OnClick="SavePlan"
                   Disabled="@_isSaving">
            @if (_isSaving)
            {
                <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                <span>Guardando...</span>
            }
            else
            {
                <span>Guardar</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<LicensePlan> _plans = new();
    private GlobalLicenseConfig _globalConfig = new();
    private bool _isSaving = false;
    
    // Dialog para editar plan
    private bool _showEditDialog = false;
    private LicensePlan? _editingPlan = null;
    private DialogOptions _dialogOptions = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    private List<BreadcrumbItem> _breadcrumbs = new()
    {
        new BreadcrumbItem("Dashboard", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Licencias", href: "/licenses", icon: Icons.Material.Filled.VerifiedUser),
        new BreadcrumbItem("Configuración", href: null, disabled: true)
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadPlans();
        await LoadGlobalConfig();
    }

    private async Task LoadPlans()
    {
        try
        {
            // TODO: Implementar llamada a la API
            await Task.Delay(500);
            
            _plans = new List<LicensePlan>
            {
                new()
                {
                    Id = 1,
                    Name = "Básico",
                    Description = "Perfecto para pequeñas empresas",
                    MonthlyPrice = 29.99m,
                    MaxEmployees = 10,
                    StorageLimit = "5 GB",
                    SupportLevel = "Email",
                    Color = Color.Info,
                    Icon = Icons.Material.Filled.Star,
                    IsPopular = false,
                    Features = new List<string>
                    {
                        "Hasta 10 empleados",
                        "Control básico de horarios",
                        "Reportes mensuales",
                        "Soporte por email",
                        "5 GB de almacenamiento"
                    }
                },
                new()
                {
                    Id = 2,
                    Name = "Profesional",
                    Description = "La opción más popular",
                    MonthlyPrice = 99.99m,
                    MaxEmployees = 50,
                    StorageLimit = "50 GB",
                    SupportLevel = "Chat",
                    Color = Color.Warning,
                    Icon = Icons.Material.Filled.Business,
                    IsPopular = true,
                    Features = new List<string>
                    {
                        "Hasta 50 empleados",
                        "Control avanzado de horarios",
                        "Reportes personalizados",
                        "Gestión de vacaciones",
                        "Soporte por chat",
                        "50 GB de almacenamiento",
                        "Integración con RRHH"
                    }
                },
                new()
                {
                    Id = 3,
                    Name = "Empresarial",
                    Description = "Para grandes organizaciones",
                    MonthlyPrice = 299.99m,
                    MaxEmployees = 0,
                    StorageLimit = "Ilimitado",
                    SupportLevel = "24/7",
                    Color = Color.Error,
                    Icon = Icons.Material.Filled.Diamond,
                    IsPopular = false,
                    Features = new List<string>
                    {
                        "Empleados ilimitados",
                        "Todas las funcionalidades",
                        "API personalizada",
                        "Reportes avanzados",
                        "Soporte 24/7",
                        "Almacenamiento ilimitado",
                        "Gestor de cuenta dedicado",
                        "Configuración personalizada"
                    }
                }
            };
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error al cargar planes: {ex.Message}");
        }
    }

    private async Task LoadGlobalConfig()
    {
        try
        {
            // TODO: Implementar llamada a la API
            await Task.Delay(300);
            
            _globalConfig = new GlobalLicenseConfig
            {
                TrialDays = 14,
                GracePeriodDays = 7,
                DefaultCurrency = "EUR",
                AutoRenewal = true,
                EmailNotifications = true,
                LicenseTerms = "Al adquirir una licencia, acepta nuestros términos y condiciones..."
            };
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error al cargar configuración: {ex.Message}");
        }
    }

    private void EditPlan(LicensePlan plan)
    {
        _editingPlan = new LicensePlan
        {
            Id = plan.Id,
            Name = plan.Name,
            Description = plan.Description,
            MonthlyPrice = plan.MonthlyPrice,
            MaxEmployees = plan.MaxEmployees,
            StorageLimit = plan.StorageLimit,
            SupportLevel = plan.SupportLevel,
            Color = plan.Color,
            Icon = plan.Icon,
            IsPopular = plan.IsPopular,
            Features = new List<string>(plan.Features)
        };
        
        _showEditDialog = true;
    }

    private void AddFeature()
    {
        _editingPlan?.Features.Add("");
    }

    private void RemoveFeature(int index)
    {
        _editingPlan?.Features.RemoveAt(index);
    }

    private void CancelEdit()
    {
        _showEditDialog = false;
        _editingPlan = null;
    }

    private async Task SavePlan()
    {
        if (_editingPlan == null) return;

        _isSaving = true;
        try
        {
            // TODO: Implementar llamada a la API
            await Task.Delay(1000);
            
            // Actualizar el plan en la lista
            var index = _plans.FindIndex(p => p.Id == _editingPlan.Id);
            if (index >= 0)
            {
                _plans[index] = _editingPlan;
            }
            
            NotificationService.ShowSuccess("Plan actualizado correctamente.");
            _showEditDialog = false;
            _editingPlan = null;
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error al guardar plan: {ex.Message}");
        }
        finally
        {
            _isSaving = false;
        }
    }

    private async Task SaveGlobalConfig()
    {
        _isSaving = true;
        try
        {
            // TODO: Implementar llamada a la API
            await Task.Delay(1000);
            
            NotificationService.ShowSuccess("Configuración guardada correctamente.");
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error al guardar configuración: {ex.Message}");
        }
        finally
        {
            _isSaving = false;
        }
    }

    // Clases modelo
    public class LicensePlan
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public decimal MonthlyPrice { get; set; }
        public int MaxEmployees { get; set; }
        public string StorageLimit { get; set; } = string.Empty;
        public string SupportLevel { get; set; } = string.Empty;
        public Color Color { get; set; }
        public string Icon { get; set; } = string.Empty;
        public bool IsPopular { get; set; }
        public List<string> Features { get; set; } = new();
    }

    public class GlobalLicenseConfig
    {
        public int TrialDays { get; set; }
        public int GracePeriodDays { get; set; }
        public string DefaultCurrency { get; set; } = string.Empty;
        public bool AutoRenewal { get; set; }
        public bool EmailNotifications { get; set; }
        public string LicenseTerms { get; set; } = string.Empty;
    }
}