@* Ruta: Sphere.Admin.Client/Pages/Auth/Login.razor *@
@page "/login"
@layout EmptyLayout
@using Sphere.Admin.Client.Services
@using Sphere.Admin.Client.Layouts
@using Shared.Models.DTOs.Auth
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<PageTitle>Login - Sphere Admin</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center" Style="height: 100vh;">
    <MudCard Elevation="8" Class="pa-4" Style="width: 100%;">
        <MudCardContent>
            <div class="text-center mb-6">
                <MudIcon Icon="@Icons.Material.Filled.Shield" 
                         Style="font-size: 64px;" 
                         Color="Color.Primary" />
                <MudText Typo="Typo.h4" Class="mt-3">
                    Sphere Admin
                </MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    Panel de Control Principal
                </MudText>
            </div>

            <MudForm @ref="_form" @bind-IsValid="@_isValid">
                <MudTextField T="string" 
                              @bind-Value="_model.Email" 
                              Label="Correo Electrónico"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="El email es requerido"
                              Validation="@(new EmailAddressAttribute() { ErrorMessage = "Email inválido" })"
                              InputType="InputType.Email"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Email"
                              Class="mb-4" />

                <MudTextField T="string" 
                              @bind-Value="_model.Password" 
                              Label="Contraseña"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="La contraseña es requerida"
                              InputType="@_passwordInputType"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Lock"
                              EndAdornment="Adornment.End"
                              OnAdornmentClick="TogglePasswordVisibility"
                              AdornmentAriaLabel="Mostrar contraseña"
                              Class="mb-2" />

                <div class="d-flex justify-space-between align-center mb-4">
                    <MudCheckBox @bind-Value="_rememberMe" 
                                 Color="Color.Primary"
                                 Label="Recordarme" />
                    
                    <MudLink Href="/forgot-password" 
                             Color="Color.Primary"
                             Typo="Typo.body2">
                        ¿Olvidaste tu contraseña?
                    </MudLink>
                </div>

                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           FullWidth="true"
                           Size="Size.Large"
                           Disabled="@(!_isValid || _loading)"
                           OnClick="HandleLogin">
                    @if (_loading)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                        <span>Iniciando sesión...</span>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Login" Class="mr-2" />
                        <span>Iniciar Sesión</span>
                    }
                </MudButton>
            </MudForm>

            @if (_showError)
            {
                <MudAlert Severity="Severity.Error" 
                          Class="mt-4"
                          ShowCloseIcon="true"
                          CloseIconClicked="@(() => _showError = false)">
                    @_errorMessage
                </MudAlert>
            }
        </MudCardContent>
        
        <MudCardActions Class="pb-4 px-4">
            <MudText Typo="Typo.caption" Color="Color.Secondary" Align="Align.Center" Class="mx-auto">
                © 2025 Sphere Control System. Todos los derechos reservados.
            </MudText>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    private MudForm _form = default!;
    private LoginModel _model = new();
    private bool _isValid;
    private bool _loading;
    private bool _showError;
    private string _errorMessage = string.Empty;
    private bool _rememberMe;
    private InputType _passwordInputType = InputType.Password;
    private string _passwordIcon = Icons.Material.Filled.VisibilityOff;

    protected override async Task OnInitializedAsync()
    {
        // Si ya está autenticado, redirigir al dashboard
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        if (!_isValid) return;

        _loading = true;
        _showError = false;

        try
        {
            var success = await AuthService.LoginAsync(_model.Email, _model.Password);
            
            if (success)
            {
                NotificationService.ShowSuccess("¡Bienvenido de vuelta!");
                Navigation.NavigateTo("/");
            }
            else
            {
                _errorMessage = "Credenciales incorrectas. Por favor, verifica tu email y contraseña.";
                _showError = true;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "Error al iniciar sesión. Por favor, intenta nuevamente.";
            _showError = true;
            Console.WriteLine($"Error en login: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        if (_passwordInputType == InputType.Password)
        {
            _passwordInputType = InputType.Text;
            _passwordIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            _passwordInputType = InputType.Password;
            _passwordIcon = Icons.Material.Filled.VisibilityOff;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "El email es requerido")]
        [EmailAddress(ErrorMessage = "Email inválido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es requerida")]
        [MinLength(6, ErrorMessage = "La contraseña debe tener al menos 6 caracteres")]
        public string Password { get; set; } = string.Empty;
    }
}