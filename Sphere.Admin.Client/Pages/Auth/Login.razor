@page "/login"
@layout AuthLayout
@using Sphere.Admin.Client.Models
@inject NavigationManager Navigation
@inject AuthenticationService AuthService

<PageTitle>Login - Sphere Admin</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center" Style="min-height: 100vh;">
    <MudCard Class="pa-8" Style="width: 100%; max-width: 400px;">
        <MudCardContent>
            <!-- Logo y Header -->
            <div class="text-center mb-6">
                <MudIcon Icon="@Icons.Material.Filled.Public" 
                         Color="Color.Primary" 
                         Size="Size.Large" 
                         Class="mb-4" 
                         Style="font-size: 4rem;" />
                <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-2">
                    Sphere Time Control
                </MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    Panel de Administración
                </MudText>
            </div>

            <!-- Formulario de Login -->
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                <MudTextField @bind-Value="loginModel.Email"
                              For="@(() => loginModel.Email)"
                              Label="Email"
                              Variant="Variant.Outlined"
                              InputType="InputType.Email"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Email"
                              Class="mb-4"
                              FullWidth="true" 
                              Placeholder="admin@test.com" />

                <MudTextField @bind-Value="loginModel.Password"
                              For="@(() => loginModel.Password)"
                              Label="Contraseña"
                              Variant="Variant.Outlined"
                              InputType="InputType.Password"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Lock"
                              Class="mb-4"
                              FullWidth="true" 
                              Placeholder="123456" />

                <!-- Mensaje de Error -->
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="mb-4">
                        @errorMessage
                    </MudAlert>
                }

                <!-- Botón de Login -->
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           FullWidth="true"
                           Class="mt-4"
                           Disabled="isLoading">
                    @if (isLoading)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="me-2" />
                        <span>Iniciando sesión...</span>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Login" Class="me-2" />
                        <span>Iniciar Sesión</span>
                    }
                </MudButton>
            </EditForm>

            <!-- Credenciales de Demo -->
            <div class="text-center mt-4">
                <MudText Typo="Typo.caption" Color="Color.Secondary">
                    💡 Demo: admin@test.com / 123456
                </MudText>
            </div>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
            
            if (result.Success)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "Error al iniciar sesión";
            }
        }
        catch
        {
            errorMessage = "Error de conexión. Intente nuevamente.";
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (await AuthService.IsAuthenticatedAsync())
        {
            Navigation.NavigateTo("/");
        }
    }
}