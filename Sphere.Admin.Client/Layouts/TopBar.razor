@inject AuthService AuthService
@inject NotificationService NotificationService
@inject NavigationManager Navigation

<MudAppBar Elevation="1" Class="px-4">
    <div class="d-flex align-center" style="width: 100%;">
        
        <!-- Título de página dinámico -->
        <div class="flex-grow-1">
            <MudText Typo="Typo.h6" Class="font-weight-normal">
                @GetPageTitle()
            </MudText>
        </div>

        <!-- Notificaciones -->
        <MudIconButton Icon="@Icons.Material.Filled.Notifications"
                       Color="Color.Default"
                       Title="Notificaciones"
                       Class="mr-2"
                       OnClick="ShowNotifications">
            <MudBadge Content="@_notificationCount"
                      Overlap="true"
                      Color="Color.Error"
                      Visible="@(_notificationCount > 0)"
                      Class="mx-2 my-2">
            </MudBadge>
        </MudIconButton>

        <!-- Configuración rápida -->
        <MudIconButton Icon="@Icons.Material.Filled.Settings"
                       Color="Color.Default"
                       Title="Configuración"
                       Class="mr-2"
                       OnClick="@(() => Navigation.NavigateTo("/system/settings"))" />

        <!-- Ayuda -->
        <MudIconButton Icon="@Icons.Material.Filled.Help"
                       Color="Color.Default"
                       Title="Ayuda"
                       Class="mr-4"
                       OnClick="ShowHelp" />

        <!-- Usuario -->
        <MudMenu Icon="@Icons.Material.Filled.AccountCircle" 
                 Color="Color.Default"
                 Direction="Origin.BottomLeft"
                 OffsetX="true"
                 Class="mr-2">
            <ChildContent>
                <div class="d-flex flex-column px-4 py-2" style="min-width: 200px;">
                    <div class="d-flex align-center mb-2">
                        <MudAvatar Color="Color.Primary" Size="Size.Medium" Class="mr-3">
                            @GetUserInitials()
                        </MudAvatar>
                        <div>
                            <MudText Typo="Typo.body2" Class="font-weight-bold">
                                @GetUserFullName()
                            </MudText>
                            <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                Super Administrador
                            </MudText>
                        </div>
                    </div>
                </div>
                
                <MudDivider />
                
                <MudMenuItem Icon="@Icons.Material.Filled.Person"
                             OnClick="@(() => Navigation.NavigateTo("/profile"))">
                    Mi Perfil
                </MudMenuItem>
                
                <MudMenuItem Icon="@Icons.Material.Filled.Security"
                             OnClick="@(() => Navigation.NavigateTo("/profile/security"))">
                    Configurar Seguridad
                </MudMenuItem>
                
                <MudDivider />
                
                <MudMenuItem Icon="@Icons.Material.Filled.Logout"
                             OnClick="HandleLogout"
                             Class="mud-error-text">
                    Cerrar Sesión
                </MudMenuItem>
            </ChildContent>
        </MudMenu>

        <!-- Status del sistema -->
        <div class="d-flex align-center ml-2">
            <MudChip T="string"
                     Size="Size.Small" 
                     Color="@GetSystemStatusColor()" 
                     Variant="Variant.Filled"
                     Title="Estado del sistema">
                <MudIcon Icon="@GetSystemStatusIcon()" Size="Size.Small" Class="mr-1" />
                @GetSystemStatus()
            </MudChip>
        </div>
    </div>
</MudAppBar>

@code {
    private int _notificationCount = 3;
    private Shared.Models.DTOs.Auth.UserInfo? _userInfo;

    protected override async Task OnInitializedAsync()
    {
        _userInfo = await AuthService.GetUserInfoAsync();
        
        // Simular carga de notificaciones
        await LoadNotifications();
    }

    private string GetPageTitle()
    {
        var path = Navigation.ToBaseRelativePath(Navigation.Uri);
        
        return path.ToLower() switch
        {
            "" or "/" => "Dashboard Principal",
            "tenants" => "Gestión de Empresas",
            "tenants/create" => "Nueva Empresa",
            "licenses" => "Gestión de Licencias",
            "licenses/config" => "Configuración de Planes",
            "billing" => "Dashboard de Facturación",
            "billing/invoices" => "Gestión de Facturas",
            "analytics" => "Estadísticas Globales",
            "analytics/usage" => "Reportes de Uso",
            "system/settings" => "Configuración del Sistema",
            "system/logs" => "Logs del Sistema",
            "system/backups" => "Gestión de Respaldos",
            "profile" => "Mi Perfil",
            "profile/security" => "Configuración de Seguridad",
            _ => "Sphere Admin"
        };
    }

    private string GetUserInitials()
    {
        if (_userInfo == null) return "SA";
        
        var firstInitial = !string.IsNullOrEmpty(_userInfo.FirstName) ? _userInfo.FirstName[0] : 'S';
        var lastInitial = !string.IsNullOrEmpty(_userInfo.LastName) ? _userInfo.LastName[0] : 'A';
        
        return $"{firstInitial}{lastInitial}".ToUpper();
    }

    private string GetUserFullName()
    {
        if (_userInfo == null) return "Super Admin";
        
        return $"{_userInfo.FirstName} {_userInfo.LastName}".Trim();
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }

    private void ShowNotifications()
    {
        NotificationService.ShowInfo($"Tienes {_notificationCount} notificaciones pendientes");
        
        // TODO: Implementar panel de notificaciones
        // Por ahora solo mostramos un mensaje
    }

    private void ShowHelp()
    {
        NotificationService.ShowInfo("Documentación disponible en: docs.sphere-control.com");
        
        // TODO: Abrir modal de ayuda o redirigir a documentación
    }

    private async Task LoadNotifications()
    {
        // TODO: Cargar notificaciones reales desde la API
        await Task.Delay(100);
        
        // Simular algunas notificaciones
        _notificationCount = 3;
    }

    private Color GetSystemStatusColor()
    {
        // TODO: Obtener estado real del sistema
        return Color.Success; // Sistema operativo
    }

    private string GetSystemStatusIcon()
    {
        // TODO: Obtener estado real del sistema
        return Icons.Material.Filled.CheckCircle;
    }

    private string GetSystemStatus()
    {
        // TODO: Obtener estado real del sistema
        return "Operativo";
    }
}